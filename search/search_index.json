{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>CrossDBUltra High-performance Lightweight Embedded and Server OLTP RDBMS\u2728</p> <p> Quick Learn\ud83e\udded Benchmark \ud83d\udcdc </p> <ul> <li> <p>\ud83c\udf0c Simple</p> <p>CrossDB is easy to install and deploy, with zero external dependencies. It runs in-process within its host application with a tiny footprint.</p> <p> Read more</p> </li> <li> <p>\u267b\ufe0f Portable</p> <p>CrossDB runs on Linux, macOS, Windows, BSD, and all popular hardware architectures. It offers idiomatic client APIs for major programming languages.</p> <p> Read more</p> </li> <li> <p>\ud83d\ude80 Ultra Fast</p> <p>The hand-written SQL parser and memory-oriented design architecture enable the database to execute SQL at blazing speed.</p> <p> Read more</p> </li> <li> <p>\u26fd Hybrid Storage Mode</p> <p>CrossDB supports both On-Disk and In-Memory databases (IMDB). It can also operate in Hybrid mode, with some tables stored On-Disk and others In-Memory.</p> </li> <li> <p>\ud83d\udd31 SQL</p> <p>Most SQL statements are standard, and CrossDB also supports many extended statements from MySQL for convenient management.</p> <p> Read more</p> </li> <li> <p>\ud83d\udcae Server Mode</p> <p>In addition to the Embedded RDBMS mode, CrossDB can also operate in Embedded Server mode or as a Standalone RDBMS server. Replication is aslo supported</p> <p> Read more</p> </li> </ul> <p></p> <p></p> CPythonSQL <pre><code>xdb_res_t   *pRes;\nxdb_row_t   *pRow;\n\nxdb_conn_t  *pConn = xdb_open (\":memory:\");\npRes = xdb_exec (pConn, \"CREATE TABLE student (id INT PRIMARY KEY, name CHAR(16), age INT, class CHAR(16), score INT)\");\n\npRes = xdb_exec (pConn, \"INSERT INTO student (id,name,age,class,score) VALUES (1001,'Jack',10,'3-1',90),(1002,'Tom',11,'2-5',91),(1003,'David',11,'1-6',92),(1004,'Rose',10,'4-2',90),(1005,'Tim',10,'3-1',95)\");\npRes = xdb_bexec (pConn, \"INSERT INTO student (id,name,age,class,score) VALUES (?,?,?,?,?)\", 1006, \"Wendy\", 10, \"4-3\", 99);\n\npRes = xdb_bexec (pConn, \"SELECT * FROM student WHERE id = ?\", 1001);\nwhile (NULL != (pRow = xdb_fetch_row (pRes))) {\n    xdb_print_row (pRes, pRow);\n    printf (\"\\n\");\n}\nxdb_free_result (pRes);\n\npRes = xdb_bexec (pConn, \"UPDATE student set age = age + ? WHERE id = ?\", 2, id);\npRes = xdb_bexec (pConn, \"DELETE FROM student WHERE id = ?\", id);\n\nxdb_close (pConn);\n</code></pre> <pre><code>import crossdb\n\nconn = crossdb.connect(database=\":memory:\")\ncursor = conn.cursor()\n\ncursor.execute(\"CREATE TABLE student (name CHAR(16), age INT, class CHAR(16))\")\ncursor.execute(\"INSERT INTO student (name,age,class) VALUES ('jack',10,'3-1'), ('tom',11,'2-5')\")\n\ncursor.execute(\"SELECT * FROM student\")\nfor row in cursor:\n    print (row)\n\ncursor.close()\nconn.close()\n</code></pre> <pre><code>CREATE TABLE student (id INT, name CHAR(16), age INT, class CHAR(16), score INT);\n\nINSERT INTO student (id,name,age,class,score) VALUES (1,'jack',10,'3-1',90),(2,'tom',11,'2-5',91),(3,'jack',11,'1-6',92),(4,'rose',10,'4-2',90),(5,'tim',10,'3-1',95);\n\nSELECT * FROM student WHERE id = 1001;\n\nUPDATE student set age = age + 2 WHERE id = 1002;\nDELETE FROM student WHERE id = 1003;\n</code></pre> <p></p> <p></p>"},{"location":"CHANGELOG/","title":"Change Log","text":""},{"location":"CHANGELOG/#0130-2025-05-07","title":"0.13.0 (2025-05-07)","text":"<p>Features</p> <ul> <li>Support <code>REPLACE</code> statement</li> <li>Support <code>Trigger</code> feature</li> <li>Support <code>Replication</code> feature</li> </ul> <p>Improvements</p> <p>Bug Fixes</p> <ul> <li>Can't open existing database</li> <li>Crash when there's query error</li> <li><code>order by</code> doesn't work for <code>VARCHAR</code>/<code>VARBINARY</code></li> <li><code>xdb_bexec</code> doesn't work for <code>VARCHAR</code>/<code>VARBINARY</code></li> <li><code>inet</code> type query doesn't work</li> <li>Python client crash</li> </ul> <p>Test</p>"},{"location":"CHANGELOG/#0120-2025-04-14","title":"0.12.0 (2025-04-14)","text":"<p>Features</p> <ul> <li>Support data types: <code>INET</code>(IPv4 and IPv6 host and subnet), <code>MAC</code> address</li> <li>Support SQL statements: <code>SHOW CREATE DATABASE</code></li> <li>Support Update SET value from NULL to valid or valid to NULL</li> <li>Support embedded SOURCE sql file</li> <li>Add many new APIs and change many APIs prototypes</li> </ul> <p>Improvements</p> <p>Test</p> <p>Bug Fixes</p> <ul> <li>Hash index flush doesn't do flush action</li> <li>Fix BOOL type bugs</li> </ul>"},{"location":"CHANGELOG/#0110-2024-11-11","title":"0.11.0 (2024-11-11)","text":"<p>Features</p> <ul> <li>Support data types: <code>BOOL</code>, <code>TIMESTAMP</code></li> <li>Support SQL statements: <code>CREATE SERVER</code> <code>DROP SERVER</code> <code>SHOW SERVERS</code></li> <li>Support APIs: <code>xdb_connect</code></li> <li>Support embedded SERVER mode</li> <li>Support <code>xdb-cli</code> standalone server mode</li> <li>Support telnet connection</li> </ul> <p>Improvements</p> <p>Test</p> <p>Bug Fixes</p> <ul> <li>INSERT without column list will set all columns to NULL</li> <li>WAL flush with wrong address and range</li> <li>Crash when table drop during flush</li> </ul>"},{"location":"CHANGELOG/#0100-2024-11-01","title":"0.10.0 (2024-11-01)","text":"<p>Features</p> <ul> <li>Support <code>VARCHAR</code>, <code>BINARY</code>, <code>VARBINARY</code></li> <li>Support <code>WAL</code> #31</li> <li>Support <code>OR</code> operator</li> <li>Support new API <code>xdb_column_blob</code></li> <li>Support <code>CREATE DATABASE</code> <code>SYNCMODE</code> option</li> </ul> <p>Improvements</p> <p>Test</p> <p>Bug Fixes</p> <ul> <li>Create duplicate database doesn't report error sometimes</li> </ul>"},{"location":"CHANGELOG/#090-2024-10-11","title":"0.9.0 (2024-10-11)","text":"<p>Features</p> <ul> <li>Support <code>LIKE</code> operator</li> <li>Support <code>NOLOCK</code> mode</li> <li>Add new APIs: <code>xdb_column_type</code> <code>xdb_column_name</code> <code>xdb_type2str</code> </li> <li>Add <code>GO</code> <code>Python</code> <code>C++</code> drivers</li> </ul> <p>Improvements</p> <ul> <li>Optimize field lookup</li> </ul> <p>Test</p> <ul> <li>Optimize <code>STL Map</code> and <code>HashMap(unordered_map)</code> benchmark test driver</li> <li>Add <code>Boost</code> <code>MultiIndex</code> benchmark test driver</li> <li>Add more smoke test cases</li> </ul> <p>Bug Fixes</p> <ul> <li>The index was incorrectly created as the primary key</li> <li>Update many rows with expression will set all rows to first row's value</li> <li>Auto-completion heap buffer access overflow</li> <li>Update transaction heap use after free</li> <li>Wrong Aggregation function result for empty table</li> <li>Update transaction crash issue</li> <li>SQL syntax error</li> </ul>"},{"location":"CHANGELOG/#080-2024-09-03","title":"0.8.0 (2024-09-03)","text":"<p>Features</p> <ul> <li><code>SELECT</code> supports simple expr, ex: <code>a + 10</code> <code>a - b</code> #12</li> <li><code>SELECT</code> supports <code>AS</code></li> <li>Support operators: <code>&gt;</code>, <code>&gt;=</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>!=</code>, <code>&lt;&gt;</code> #13</li> <li><code>WHERE</code> expression supports having the field on the right side, ex: <code>5 &lt; id</code></li> <li><code>xdb-cli</code> creates a default memory database, allowing you to directly create tables for practice.</li> <li>Support <code>CMake</code></li> </ul> <p>Improvements</p> <ul> <li>Optimize <code>INSERT</code> <code>UPDATE</code> <code>DELETE</code> auto-commit performance for in-memory database </li> </ul> <p>Test</p> <ul> <li>Refactor benchmark test framework and support binding cpu core</li> <li>New crossdb and <code>SQLite</code> benchmark test driver</li> <li>Add C++ <code>STL Map</code> and <code>HashMap(unordered_map)</code> benchmark test driver</li> <li>Import unit test framework</li> <li>Add few test cases</li> </ul> <p>Bug Fixes</p> <ul> <li>Fix bug #15 Segmentation fault occurs while using on-disk database</li> <li>Fix close connection then reopen connection will cause previous connection use-after-free issue and memory leak issue</li> <li>Fix query misses issue during hash index rehashing</li> </ul>"},{"location":"CHANGELOG/#070-2024-08-26","title":"0.7.0 (2024-08-26)","text":"<p>Features</p> <ul> <li><code>UPDATE</code> SET clause supports simple expression, ex: <code>SET val=val+5</code> <code>SET val=a-b</code></li> <li><code>UPDATE</code> SET supports prepared statement</li> <li><code>INSERT</code> supports prepared statement</li> <li>New APIs: <code>xdb_bexec</code>, <code>xdb_vbexec</code>, <code>xdb_stmt_bexec</code>, <code>xdb_stmt_vexec</code>, <code>xdb_clear_bindings</code></li> </ul> <p>Improvements</p> <ul> <li><code>INSERT</code> parser avoids malloc</li> <li><code>UPDATE</code> only updates affected indexes</li> <li>Optimize <code>INSERT</code> <code>UPDATE</code> <code>DELETE</code> auto-commit performance for in-memory database </li> </ul> <p>Test</p> <ul> <li>Improve benchmark test</li> <li>Add <code>SQLite</code> benchmark test</li> </ul> <p>Bug Fixes</p> <ul> <li>Fix hash index infinite loop issue</li> <li>Fix bench test time unit <code>ns</code> to <code>us</code></li> </ul>"},{"location":"CHANGELOG/#060-2024-08-18","title":"0.6.0 (2024-08-18)","text":"<p>Initial refactor release</p> <ul> <li>This project was redesigned and rewritten from scratch for over one year</li> <li>Standard RDBMS model</li> <li>New SQL APIs which can support more language</li> <li>MySQL style SQL and shell, which will be easy to study.</li> </ul>"},{"location":"CHANGELOG/#050-2023-06-26","title":"0.5.0 (2023-06-26)","text":"<p>Features</p> <ul> <li>CrossDB command line tool <code>crossdb-cli</code> is released</li> <li>Optimize insert/update/query/delete performance</li> <li>Add new API <code>cross_matchCreate</code> and <code>cross_matchFree</code></li> <li>DML APIs supports <code>cross_fields_h</code> and <code>cross_match_h</code></li> </ul> <p>Bug Fixes</p>"},{"location":"CHANGELOG/#040-2023-06-20","title":"0.4.0 (2023-06-20)","text":"<p>Features</p> <ul> <li>Support FreeBSD(X64)</li> <li>Optimize insert/update/query/delete performance</li> <li>Add new API <code>cross_fieldsCreate</code> and <code>cross_fieldsFree</code></li> </ul> <p>Bug Fixes</p>"},{"location":"CHANGELOG/#030-2023-06-13","title":"0.3.0 (2023-06-13)","text":"<p>Features</p> <ul> <li>Support MacOS (X64 and ARM64)</li> <li>Change <code>CROSS_DB_XXX</code> to <code>CROSS_XXX</code></li> </ul> <p>Bug Fixes</p> <ul> <li><code>cross_dbTblCreate</code> flags <code>CROSS_DB_RBTREE</code> doesn't create Primary Key Index type correctly</li> </ul>"},{"location":"CHANGELOG/#020-2023-06-07","title":"0.2.0 (2023-06-07)","text":"<p>Features</p> <ul> <li>Support Windows</li> <li>Support Linux ARM64</li> </ul> <p>Bug Fixes</p>"},{"location":"CHANGELOG/#010-2023-06-03","title":"0.1.0 (2023-06-03)","text":"<ul> <li>Initial release</li> </ul>"},{"location":"community/","title":"Community","text":""},{"location":"community/#report-bugs","title":"Report Bugs","text":"<p>Github Issues</p>"},{"location":"community/#require-fetures","title":"Require Fetures","text":"<p>Github Fetures</p>"},{"location":"community/#discussion","title":"Discussion","text":"<p>Github Discussion</p>"},{"location":"community/#contribution","title":"Contribution","text":"<p>This project is still in its early stages and currently lacks stability. We welcome the following contributions:</p> <ul> <li>Language bindings: <code>Python</code>, <code>Java</code>, <code>Go</code>, <code>CSharp</code>, <code>JavaScript</code>, <code>PHP</code>, etc.</li> <li>Bug Reporting: Identify and report any issues or bugs you encounter.</li> <li>Testing: Participate in testing to ensure the reliability and stability of the project.</li> </ul> <p>Your contributions will be greatly appreciated and will help us make this project more robust and reliable.</p>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#what-are-the-reasons-for-creating-a-new-relational-dbms","title":"What are the reasons for creating a new Relational DBMS?","text":"<p>CrossDB is engineered for ultra high-performance scenarios, where existing SQL and NoSQL databases fall short of meeting the stringent performance requirements. </p> <p>We have investigated and tested the following databases:</p> <ul> <li>Open Source: <code>SQLite</code>, <code>H2</code>, <code>ObjectBox</code>, <code>Realm</code>, <code>PERST</code>, <code>BerkeleyDB</code>, <code>WiredTiger</code>(<code>MongoDB</code> Storage Engine), <code>LMDB</code>, <code>mdbx</code>, <code>LevelDB</code>, <code>RocksDB</code>, <code>forestdb</code>,   <code>Sophia</code>, <code>unqilite</code>, <code>upscaledb</code>, <code>Vedis</code>, <code>FastDB</code></li> <li>Commercial: <code>eXtremeDB</code>, <code>RaimaDB</code></li> </ul>"},{"location":"faq/#what-are-the-drawbacks-or-limitations-of-crossdb","title":"What are the drawbacks or limitations of CrossDB?","text":"<p>CrossDB has a few limitations to consider:</p> <ul> <li>The database size must be relatively small, and the available memory must exceed the database size to achieve maximum speed.</li> <li>It does not support network-mounted disks.</li> </ul>"},{"location":"faq/#why-is-it-called-crossdb","title":"Why is it called CrossDB?","text":"<p>CrossDB is named for its versatility across various applications:</p> <ul> <li>Lightweight Embedded DB</li> <li>High-performance OLTP DB</li> <li>In-Memory DB/OnDisk DB/Hybrid DB</li> <li>Managing runtime data to replace STL, collections, or hand-written data structures</li> <li>Embedded and Standalone Server</li> <li>Data-driven development (future plan)</li> <li>Native language triggers (future plan)</li> <li>JSON support (future plan)</li> <li>Data PUBSUB (future plan)</li> <li>Data Replication (future plan)</li> <li>Functioning as a Redis Server (future plan)</li> <li>Functioning as a MySQL Server (future plan)</li> <li>And more</li> </ul> <p>Thus, it is not merely a pure embedded database.</p>"},{"location":"faq/#why-is-crossdb-so-fast","title":"Why is CrossDB so fast?","text":"<ul> <li>Utilizes memory mapping to access DB data directly.</li> <li>Employs a high-performance hash as the main index, with the super-fast wyhash as the hash function.</li> <li>Uses a hand-written SQL parser that is over 10 times faster than Flex/Bison parser tools.</li> <li>Incorporates high-performance read-write locks and multi-core optimization.</li> <li>Executes multiple SQL statements in a single API call, significantly enhancing client-server database interactions.</li> <li>Uses highly efficient client-server protocols.</li> <li>Minimizes memory allocation and deallocation.</li> <li>Minimizes the use of temporary tables whenever possible.</li> <li>Implements high-performance code.</li> </ul>"},{"location":"faq/#why-not-use-scanner-and-parser-tools-like-flexbison","title":"Why not use scanner and parser tools like Flex/Bison?","text":"<p>CrossDB uses a hand-written scanner and a hand-written recursive descent parser because:</p> <ul> <li>The hand-written scanner/parser is smaller, about one-third the size of code generated by Flex/Bison tools.</li> <li>It is more efficient, approximately 10 times faster than Flex/Bison tools.</li> <li>It is more portable.</li> <li>It is fully reentrant and thread-safe.</li> <li>It provides better error messages.</li> <li>It is easier to read, debug, and optimize.</li> <li>Its fast SQL execution speed can meet most scenarios without the need for prepared statements. (CrossDB SQL performance is several times faster than SQLite prepared statements)</li> </ul>"},{"location":"glossary/","title":"Glossary","text":""},{"location":"glossary/#acid","title":"ACID","text":"<p>ACID refers to the four key properties of a transaction: atomicity, consistency, isolation, and durability. Each of these properties is described below.</p> <p>Atomicity means that either all the changes of an operation are performed, or none of them are.</p> <p>Consistency means that transactions always bring the database from one consistent state to another.</p> <p>Isolation means that a transaction in process is invisible to other transactions until it completes. This allows concurrent transactions to read and write data without sacrificing consistency.</p> <p>Durability means that once a transaction is committed, it remains committed even in the event of a system failure.</p>"},{"location":"glossary/#crud","title":"CRUD","text":"<p>Acronym for \u201ccreate, read, update, delete\u201d, a common sequence of operations in database applications. Often denotes a class of applications with relatively simple database usage (basic DDL, DML and query statements in SQL) that can be implemented quickly in any language.</p>"},{"location":"glossary/#ddl","title":"DDL","text":"<p>Data definition language, a set of SQL statements for manipulating the database itself rather than individual table rows. Includes all forms of the CREATE, ALTER, and DROP statements. DDL statements automatically commit the current transaction; they cannot be rolled back.</p>"},{"location":"glossary/#dml","title":"DML","text":"<p>Data manipulation language, a set of SQL statements for performing SELECT, INSERT, UPDATE, and DELETE operations.</p>"},{"location":"glossary/#hash-index","title":"Hash Index","text":"<p>A type of index intended for queries that use equality operators, rather than range operators such as greater-than or BETWEEN.</p>"},{"location":"glossary/#imdb","title":"IMDB","text":"<p>IMDB(In-Memory database) is a type of database system that maintains data in memory, to avoid overhead due to disk I/O and translation between disk blocks and memory areas.</p>"},{"location":"glossary/#index","title":"Index","text":"<p>A data structure that provides a fast lookup capability for rows of a table, typically by forming a tree structure (B-tree) representing all the values of a particular column or set of columns.</p>"},{"location":"glossary/#information_schema","title":"INFORMATION_SCHEMA","text":"<p>The name of the database that provides a query interface to the CrpssDB data dictionary. (This name is defined by the ANSI SQL standard.) To examine information (metadata) about the database, you can query tables such as INFORMATION_SCHEMA.TABLES and INFORMATION_SCHEMA.COLUMNS, rather than using SHOW commands that produce unstructured output.</p>"},{"location":"glossary/#mvcc","title":"MVCC","text":"<p>MVCC(Multi-Version Concurrency Control) is a concurrency control mechanism in many databases. It processes the memory read by transactions to achieve concurrent access to DB, thereby avoiding blocking caused by conflicts between concurrent reads and writes.</p>"},{"location":"glossary/#oltp","title":"OLTP","text":"<p>Acronym for \u201cOnline Transaction Processing\u201d. A database system, or a database application, that runs a workload with many transactions, with frequent writes as well as reads, typically affecting small amounts of data at a time.</p>"},{"location":"glossary/#sql","title":"SQL","text":"<p>The Structured Query Language that is standard for performing database operations. Often divided into the categories DDL, DML, and queries. </p>"},{"location":"intro/","title":"Introduction","text":"<p>CrossDB is a ultra high-performance, lightweight embedded and server OLTP RDBMS.  It is designed for high-performance scenarios where the main memory can hold the entire database.</p>"},{"location":"intro/#features","title":"Features","text":"Name CrossDB Description Ultra High-performance Lightweight Embedded and Server OLTP RDBMS\u2728 Primary database model Relational DBMS Secondary database models Document store(TBD)Key-value store(TBD) Website crossdb.org Technical documentation crossdb.org/intro Initial release 2023 License Open Source, MPL Cloud-based only no Implementation language C Server operating systems Server-Less ModeEmbedded Server ModeStandalone Server ModeLinux/MacOS/Windows/FreeBSD32-bit or 64-bit X86, ARM, PowerPC, MIPS, etc Data scheme yes Typing yesBOOLTINYINT, SMALLINT, INT, BIGINTTIMESTAMPFLOAT, DOUBLECHAR, VARCHARBINARY, VARBINARYINET(IPv4/IPv6 host and subnet), MAC address XML support no Secondary indexes yesHASH, RBTREE SQL yes, many extensions from MySQL APIs and other access methods Proprietary native APIsMulti-statement APIsPrepared statement APIs Supported programming languages C, C++, Python, GO, RustMore bindings(TBD) Server-side scripts LUA(TBD) Triggers yes, native languages Partitioning methods none Replication methods Source-replica replicationMulti-source replicationLogical Replication(TBD) Data Subscription yes(TBD) MapReduce no Consistency concepts Immediate Consistency Foreign keys yes(TBD) TTL yes Transaction concepts ACID Concurrency yesTable-level read-write locksRow-level read-write locks(TBD)Reader-Writer MVCC (write transaction doesn't block read transactions)PostgreSQL-like MVCC(TBD) Durability yes, WAL In-memory capabilities yes User concepts yes(TBD) Storage Model Row-oriented On-Disk, In-Memory, RamDiskHybrid Storage (on a table-by-table basis, tables can be designated for in-memory or on-disk storage) Admin Embedded shellxdb-cli tooltelnetWEB GUI(TBD)"},{"location":"intro/#use-cases","title":"Use Cases","text":"<ul> <li>High-frequency trading (OLTP).</li> <li>High-performance queries.</li> <li>High-performance data management: Use CrossDB OnDisk DB to store data on HDD/SSD/Flash.</li> <li>High-performance IMDB: Use CrossDB In-Memory DB to manage process runtime data, replacing STL or hand-written data structures.</li> <li>Use CrossDB RamDisk DB to support process restartability and in-service software upgrades (ISSU) easily.</li> <li>Use CrossDB as a super-fast cache DB.</li> </ul>"},{"location":"about/buy/","title":"How to Buy","text":""},{"location":"about/privacy/","title":"Privacy Notice","text":""},{"location":"about/privacy/#introduction","title":"Introduction","text":"<p>CrossDB Software has designed its website so that, in general, you can browse the CrossDB website without being asked for any personal information. Exceptions to this are when you specifically ask for information, request an evaluation copy of our software or download CrossDB trial software.</p> <p>This policy covers how CrossDB Software treats personal information that CrossDB may collect and receive via the CrossDB website. Your use of the CrossDB website constitutes acceptance of and agreement with the CrossDB Software Privacy Policy. CrossDB reserves the right to change the CrossDB Software Privacy Policy at any time without notice.</p>"},{"location":"about/privacy/#information-collection-and-use","title":"Information collection and use","text":"<p>CrossDB collects personal information when you request for information, request an evaluation of our software or when you download trial software. This information includes information about you such as name, business name and address, telephone and fax numbers, email address, operating system, and hardware environment. Providing information is voluntary. You may provide this information by filling out an on-line form, by email or other communication to CrossDB. However, you may not receive the product information, software evaluation or downloads if you choose not to provide the requested information.</p> <p>CrossDB Software's use of the information you provided will be to send you the information that you requested. CrossDB Software may also use the information to provide you with additional information about our products and services or market research. The information may be used to follow up with you regarding information supplied, software you downloaded or evaluated.</p> <p>CrossDB does not sell information collected from users of CrossDB website to other organizations. CrossDB may share the information collected with its subsidiaries and its affiliates such as partners and distributors.</p>"},{"location":"about/privacy/#general-information","title":"General Information","text":"<p>CrossDB web servers record standard information about CrossDB Web accesses such as IP addresses, your server name, browser type, etc. when you visit our website. CrossDB uses this for information about usage at CrossDB Software's website. The information submitted to CrossDB Software via the Web may be processed, stored and used outside the country where it was submitted.</p> <p>Links to third party websites are provided for your convenience. By using these links, you will no longer be on the CrossDB Software website and the CrossDB Software Privacy Policy will no longer apply.</p>"},{"location":"about/privacy/#contact-us","title":"Contact us","text":"<p>If you have any question about the information you provided to us or about the CrossDB Software Privacy Policy, please contact us at support@crossdb.org</p>"},{"location":"about/refund/","title":"Refund Policy","text":"<p>Thank you for using CrossDB Database! We don't offer refund, please try it first then subscribe the product by month or year. You can cancel the subscription anytime as you want.</p>"},{"location":"about/terms/","title":"Terms of Service","text":"<p>CrossDB provides this Website for your information and use, subject to the terms set forth below. By accessing this Website, you agree to accept the following terms.</p>"},{"location":"about/terms/#general-terms","title":"General terms","text":"<p>In no event will CrossDB be liable for any damages including, without limitation, indirect, incidental, consequential, special or exemplary damages, that arise out of or relate to the use of or inability to use the CrossDB Website, even if CrossDB has been advised of the possibility of such damages.</p> <p>Any and all information provided on CrossDB\u2019s Website is provided \u201cas is,\u201d with no warranty as to accuracy or content.</p> <p>CrossDB does not adopt or endorse the views of any third party Websites linked to or from the CrossDB Website.</p> <p>CrossDB reserves the right to change, modify, add or remove any of these terms at any time.</p>"},{"location":"admin/data-backup/","title":"Data Backup","text":""},{"location":"admin/data-backup/#dump-with-dump-statement","title":"Dump with DUMP statement","text":"<ul> <li>Dump everything</li> </ul> SQLC <pre><code>DUMP DATABASE school INTO 'school.sql';\n</code></pre> <pre><code>xdb_exec (pConn, \"DUMP DATABASE school INTO 'school.sql'\");\n</code></pre> <ul> <li>Dump schema only</li> </ul> SQLC <pre><code>DUMP DATABASE school NODATA INTO 'school.sql';\n</code></pre> <pre><code>xdb_exec (pConn, \"DUMP DATABASE school NODATA INTO 'school.sql'\");\n</code></pre> <ul> <li>Dump data only</li> </ul> SQLC <pre><code>DUMP DATABASE school NODROP NOCREATE INTO 'school.sql';\n</code></pre> <pre><code>xdb_exec (pConn, \"DUMP DATABASE school NODROP NOCREATE INTO 'school.sql'\");\n</code></pre>"},{"location":"admin/data-backup/#dump-with-crossdb-tool","title":"Dump with crossdb tool","text":"<ul> <li>Dump everything</li> </ul> <pre><code>crossdb -e \"DUMP DATABASE\" school &gt; school.sql\n</code></pre> <pre><code>crossdb -e \"DUMP DATABASE school INTO 'school.sql'\" school\n</code></pre> <ul> <li>Dump schema only</li> </ul> <pre><code>crossdb -e \"DUMP DATABASE school NODATA INTO 'school.sql'\" school\n</code></pre> <ul> <li>Dump data only</li> </ul> <pre><code>crossdb -e \"DUMP DATABASE school NODROP NOCREATE INTO 'school.sql'\" school\n</code></pre>"},{"location":"admin/data-restore/","title":"Data Restore","text":""},{"location":"admin/data-restore/#load-with-source-statement","title":"Load with SOURCE statement","text":"SQLC <pre><code>SOURCE 'school.sql'\n</code></pre> <pre><code>xdb_exec (pConn, \"SOURCE 'school.sql'\");\n</code></pre>"},{"location":"admin/data-restore/#load-with-crossdb-tool","title":"Load with CrossDB tool","text":"<pre><code>crossdb school &lt; school.sql\n</code></pre> <pre><code>cat school.sql | crossdb school\n</code></pre> <pre><code>crossdb -e \"SOURCE 'school.sql'\" school\n</code></pre>"},{"location":"admin/shell/","title":"CrossDB Shell","text":""},{"location":"admin/shell/#crossdb-tool","title":"CrossDB tool","text":"<p>This tool can</p> <ul> <li>Open and operate many local databases.</li> <li>Connect to and operate a remote database server.</li> <li>Work as standalone database server.</li> </ul> <p>Note</p> <p><code>xdb-cli</code> creates a default memory database, allowing you to directly create tables for practice.</p> <pre><code>$ xdb-cli -?\nUsage: xdb-cli [OPTIONS] [[path]/db_name]\n  -?                        Show this help\n  -S                        Server: Start in server mode, default port 7777\n  -I                        Server ID: &lt;string&gt;\n  -h &lt;ip&gt;                   IP address to bind to or connect to\n  -P &lt;port&gt;                 Port to listen or connect\n  -D &lt;datadir&gt;              Server: Data directory to store databases, default '/var/xdb_data'\n  -q                        Server: quite mode.\n  -u &lt;user&gt;                 Client user\n  -p                        Client password\n  -e &lt;sql&gt;                  Client: Execute command and quit.\n</code></pre>"},{"location":"admin/shell/#open-db","title":"Open DB","text":"<pre><code>xdb-cli school\n</code></pre>"},{"location":"admin/shell/#open-db-and-execute-command","title":"Open DB and Execute Command","text":"<pre><code>xdb-cli -e 'SELECT * FROM student WHERE id=1; SELECT * FROM student WHERE age=10' school\n</code></pre>"},{"location":"admin/shell/#connect-to-crossdb-server","title":"Connect to CrossDB Server","text":"<pre><code>xdb-cli -P 7777\nxdb-cli -h 192.168.172.176\nxdb-cli -h 192.168.172.176 -P 8888\n\nxdb-cli -P 7777 school\nxdb-cli -h 192.168.172.176 school\nxdb-cli -h 192.168.172.176 -P 7777 school\n</code></pre>"},{"location":"admin/shell/#connect-to-crossdb-server-and-execute-command","title":"Connect to CrossDB Server and Execute Command","text":"<pre><code>xdb-cli -P 7777 -e 'SELECT * FROM school.student WHERE id=1; SELECT * FROM school.student WHERE age=10'\nxdb-cli -h 192.168.172.176 -e 'SELECT * FROM school.student WHERE id=1; SELECT * FROM school.student WHERE age=10'\nxdb-cli -h 192.168.172.176 -P 7777 -e 'SELECT * FROM school.student WHERE id=1; SELECT * FROM school.student WHERE age=10'\n\nxdb-cli -P 7777 -e 'SELECT * FROM student WHERE id=1; SELECT * FROM student WHERE age=10' school\nxdb-cli -h 192.168.172.176 -e 'SELECT * FROM student WHERE id=1; SELECT * FROM student WHERE age=10' school\nxdb-cli -h 192.168.172.176 -P 7777 -e 'SELECT * FROM student WHERE id=1; SELECT * FROM student WHERE age=10' school\n</code></pre>"},{"location":"admin/shell/#connect-to-crossdb-with-telnet","title":"Connect to CrossDB with Telnet","text":"<pre><code>$ telnet 127.0.0.1 7777\nTrying 127.0.0.1...\nConnected to 127.0.0.1.\nEscape character is '^]'.\nUSE school;\nDatabase changed\n\nSHOW TABLES;\n+---------+--------+\n| table   | engine |\n+---------+--------+\n| student | MMAP   |\n+---------+--------+\n1 row in set (0.048 ms)\n\nSELECT * FROM student;\n+----+------+-----+-------+-----------+------+\n| id | name | age | class | score     | info |\n+----+------+-----+-------+-----------+------+\n| 1  | Jack | 10  | 3-1   | 90.500000 | NULL |\n| 2  | Tom  | 10  | 2-5   | 91.900002 | NULL |\n| 3  | Jack | 11  | 1-6   | 92.300003 | NULL |\n+----+------+-----+-------+-----------+------+\n3 rows in set (0.023 ms)\n\nexit\nConnection closed by foreign host.\n</code></pre>"},{"location":"admin/shell/#embedded-shell","title":"Embedded Shell","text":"<p>Your program can enter the interactive shell using the <code>SHELL</code> statement.</p> SQLC <pre><code>SHELL\n</code></pre> <pre><code>xdb_exec (pConn, \"SHELL\");\n</code></pre>"},{"location":"admin/shell/#auto-completion","title":"Auto Completion","text":"<p>Use <code>TAB</code> to auto-complete SQL statements, keywords, database names, table names, field names, etc.</p> <pre><code>XDB&gt; &lt;TAB&gt;\nCREATE      Create database, table, index, etc\nDROP        Drop database, table, index, etc\nALTER       Alter database, table, index, etc\nSELECT      Select rows from table\nINSERT      Insert rows into table\nUPDATE      Update rows in table\nDELETE      Delete rows from table\nBEGIN       Begin transaction\nCOMMIT      Commit transaction\nROLLBACK    Rollback transaction\nUSE         Switch Database\nSHOW        Show database, table, index, etc\nDESCRIBE    Show Table Schema\nEXPLAIN     Show SELECT statement index selection\nSET         Config parameters\nOPEN        Open database\nCLOSE       Close database\nDUMP        Dump database\nSOURCE      Load SQL file\nSHELL       Enter interactive shell\nHELP        Help\n</code></pre> <pre><code>XDB&gt; S &lt;TAB&gt;\nSELECT    Select rows from table\nSHOW      Show database, table, index, etc\nSET       Config parameters\nSOURCE    Load SQL file\nSHELL     Enter interactive shell\nXDB&gt; SE &lt;TAB&gt;\nSELECT    Select rows from table\nSET       Config parameters\nXDB&gt; SEL &lt;TAB&gt;\nXDB&gt; SELECT\n</code></pre> <pre><code>XDB&gt; SELECT &lt;TAB&gt;\nXDB&gt; SELECT * &lt;TAB&gt;\nXDB&gt; SELECT * FROM &lt;TAB&gt;\nstudent    teacher    book\nXDB&gt; SELECT * FROM s&lt;TAB&gt;\nXDB&gt; SELECT * FROM student\n</code></pre> <pre><code>XDB&gt; SELECT * FROM student &lt;TAB&gt;\nWHERE       ORDER BY    LIMIT       OFFSET      AND         id          name        age         class       score\ninfo\nXDB&gt; SELECT * FROM student WHERE i &lt;TAB&gt;\nid      info\n</code></pre> <pre><code>XDB&gt; SHOW  &lt;TAB&gt;\nDATABASES    TABLES       INDEXES      COLUMNS      CREATE\n</code></pre>"},{"location":"blog/benchmark/crossdb-vs-sqlite3/","title":"SQLite3 Benchmark vs. CrossDB","text":""},{"location":"blog/benchmark/crossdb-vs-sqlite3/#test-tool","title":"Test Tool","text":"<p>This tool will use auto-commit transaction to test single CRUD performance.</p> <p>Bench Tool</p> <p>Bench Test Framework</p> <p>SQLite Bench Driver</p> <p>CrossDB Bench Driver</p> <p>The test scripts will conduct five rounds of testing and select the average value.</p> <pre><code>crossdb/bench/basic$ ./bench-sqlite.bin -q -r 5 -n 1000\ncrossdb/bench/basic$ ./bench-sqlite.bin -q -r 5 -n 10000\ncrossdb/bench/basic$ ./bench-sqlite.bin -q -r 5 -n 100000\ncrossdb/bench/basic$ ./bench-sqlite.bin -q -r 5 -n 1000000\ncrossdb/bench/basic$ ./bench-sqlite.bin -q -r 5 -n 10000000\n</code></pre> <pre><code>crossdb/bench/basic$ ./bench-crossdb.bin -q -r 5 -n 1000\ncrossdb/bench/basic$ ./bench-crossdb.bin -q -r 5 -n 10000\ncrossdb/bench/basic$ ./bench-crossdb.bin -q -r 5 -n 100000\ncrossdb/bench/basic$ ./bench-crossdb.bin -q -r 5 -n 1000000\ncrossdb/bench/basic$ ./bench-crossdb.bin -q -r 5 -n 10000000\n</code></pre>"},{"location":"blog/benchmark/crossdb-vs-sqlite3/#test-server","title":"Test Server","text":"<pre><code>CPU         : 11th Gen Intel(R) Core(TM) i7-11700 @ 2.50GHz, Cache size 16384 KB\nOS          : Ubuntu 24.04\nSQLite3     : 3.45.1\nCrossDB     : 0.8.0\nCompiler    : gcc 13.2.0 with -O2 optimization\n</code></pre> <p>Note</p> <p>Test results will vary depending on the CPU, OS, compiler, SQLite, and system load. Even on the same server, the results will differ each time.</p>"},{"location":"blog/benchmark/crossdb-vs-sqlite3/#sqlite3-config","title":"SQLite3 Config","text":"IMDB <pre><code>PRAGMA synchronous = OFF\nPRAGMA journal_mode = OFF\nPRAGMA temp_store = memory\nPRAGMA optimize\n</code></pre>"},{"location":"blog/benchmark/crossdb-vs-sqlite3/#in-memory-db-test-with-int","title":"In-Memory DB Test with INT","text":""},{"location":"blog/benchmark/crossdb-vs-sqlite3/#1000-rows","title":"1,000 Rows","text":""},{"location":"blog/benchmark/crossdb-vs-sqlite3/#sequential-access-test","title":"Sequential Access Test","text":"DB Access Insert QPS Query QPS Update QPS Delete QPS SQLite SQL 444,031 347,166 476,283 547,431 SQLite STMT 1,465,141 1,717,823 1,511,057 1,659,559 CrossDB SQL 4,215,446 8,381,424 7,118,192 8,141,135 CrossDB STMT 17,773,584 28,868,027 22,767,213 23,593,441"},{"location":"blog/benchmark/crossdb-vs-sqlite3/#random-access-test","title":"Random Access Test","text":"DB Access Insert QPS Query QPS Update QPS Delete QPS SQLite SQL 479,327 342,898 455,207 513,080 SQLite STMT 1,436,354 1,585,270 1,362,022 1,264,225 CrossDB SQL 4,139,391 8,242,617 7,076,336 8,017,873 CrossDB STMT 20,171,189 28,834,741 22,076,943 21,973,314"},{"location":"blog/benchmark/crossdb-vs-sqlite3/#10000-rows","title":"10,000 Rows","text":""},{"location":"blog/benchmark/crossdb-vs-sqlite3/#sequential-access-test_1","title":"Sequential Access Test","text":"DB Access Insert QPS Query QPS Update QPS Delete QPS SQLite SQL 465,746 365,272 492,969 567,567 SQLite STMT 1,455,917 1,754,636 1,497,556 1,590,700 CrossDB SQL 3,996,073 8,349,983 7,177,796 7,938,875 CrossDB STMT 14,752,474 28,119,037 22,175,662 22,469,934"},{"location":"blog/benchmark/crossdb-vs-sqlite3/#random-access-test_1","title":"Random Access Test","text":"DB Access Insert QPS Query QPS Update QPS Delete QPS SQLite SQL 480,618 351,898 458,791 488,328 SQLite STMT 1,440,440 1,446,238 1,234,900 1,133,192 CrossDB SQL 4,013,831 8,214,870 7,085,060 7,879,357 CrossDB STMT 16,550,826 26,314,983 21,294,530 21,212,114"},{"location":"blog/benchmark/crossdb-vs-sqlite3/#100000-rows","title":"100,000 Rows","text":""},{"location":"blog/benchmark/crossdb-vs-sqlite3/#sequential-access-test_2","title":"Sequential Access Test","text":"DB Access Insert QPS Query QPS Update QPS Delete QPS SQLite SQL 443,883 333,024 463,052 533,732 SQLite STMT 1,345,829 1,555,415 1,347,454 1,487,578 CrossDB SQL 4,239,776 8,341,312 7,169,947 8,196,762 CrossDB STMT 19,700,788 28,480,655 21,548,692 23,305,607"},{"location":"blog/benchmark/crossdb-vs-sqlite3/#random-access-test_2","title":"Random Access Test","text":"DB Access Insert QPS Query QPS Update QPS Delete QPS SQLite SQL 477,014 316,785 424,871 447,925 SQLite STMT 1,324,866 1,090,353 943,368 870,952 CrossDB SQL 4,365,528 7,832,824 6,781,819 7,585,048 CrossDB STMT 20,411,675 22,748,379 18,789,522 19,783,731"},{"location":"blog/benchmark/crossdb-vs-sqlite3/#1000000-rows","title":"1,000,000 Rows","text":""},{"location":"blog/benchmark/crossdb-vs-sqlite3/#sequential-access-test_3","title":"Sequential Access Test","text":"DB Access Insert QPS Query QPS Update QPS Delete QPS SQLite SQL 409,641 347,039 450,932 526,749 SQLite STMT 971,797 1,530,663 1,317,463 1,410,394 CrossDB SQL 4,186,583 8,375,044 7,140,896 8,163,019 CrossDB STMT 18,477,686 27,987,661 21,844,773 23,105,578"},{"location":"blog/benchmark/crossdb-vs-sqlite3/#random-access-test_3","title":"Random Access Test","text":"DB Access Insert QPS Query QPS Update QPS Delete QPS SQLite SQL 418,170 280,799 348,489 313,792 SQLite STMT 974,462 727,507 667,852 459,427 CrossDB SQL 4,147,156 4,302,668 4,083,974 4,255,194 CrossDB STMT 18,610,416 6,568,603 6,631,045 6,341,988"},{"location":"blog/benchmark/crossdb-vs-sqlite3/#10000000-rows","title":"10,000,000 Rows","text":""},{"location":"blog/benchmark/crossdb-vs-sqlite3/#sequential-access-test_4","title":"Sequential Access Test","text":"DB Access Insert QPS Query QPS Update QPS Delete QPS SQLite SQL 243,287 340,278 445,961 518,552 SQLite STMT 277,805 1,475,522 1,251,100 1,321,721 CrossDB SQL 4,113,196 8,186,354 6,983,995 7,503,637 CrossDB STMT 17,671,148 26,329,139 20,146,554 20,992,326"},{"location":"blog/benchmark/crossdb-vs-sqlite3/#random-access-test_4","title":"Random Access Test","text":"DB Access Insert QPS Query QPS Update QPS Delete QPS SQLite SQL 249,471 251,937 312,320 140,818 SQLite STMT 274,652 588,801 556,308 128,117 CrossDB SQL 4,067,964 3,445,369 3,050,205 3,360,645 CrossDB STMT 18,768,313 4,923,951 4,299,394 4,622,262"},{"location":"blog/benchmark/crossdb-vs-stlmap/","title":"C++ STL Map and HashMap Benchmark vs. CrossDB","text":""},{"location":"blog/benchmark/crossdb-vs-stlmap/#overview","title":"Overview","text":"<p>This benchmark test aims to demonstrate that the performance of the CrossDB in-memory database is sufficient to serve as an alternative to STL Map/HashMap or Boost Multi-Index.</p> <p>When dealing with complex relational data, significant effort may be required to design and optimize your complex lookup strategy using maps or hashmaps. Databases excel in effective query planning and indexing. If you create efficient indexes and query plans for your maps, you can achieve high performance. However, if you have complex relationships involving numerous tables, do you really want to handle all the query planning yourself?</p> <p>One of the key advantages of a database is its flexibility. While bespoke solutions for known and stable data relations or structures can match or even surpass database performance, any changes would necessitate rewriting your complex lookup logic. In contrast, with a RDBMS, you can simply use UML to model and adjust your SQL queries.</p>"},{"location":"blog/benchmark/crossdb-vs-stlmap/#test-tool","title":"Test Tool","text":"<p>This tool will use auto-commit transaction to test single CRUD performance for CrossDB Prepared STMT.</p> <p>Bench Tool</p> <p>Bench Test Framework</p> <p>STL Map&amp;HashMap Bench Driver</p> <p>CrossDB Bench Driver</p> <p>The test scripts will conduct five rounds of testing and select the average value.</p> <pre><code>crossdb/bench/basic$ ./bench-stlmap.bin -q -r 5 -n 1000\ncrossdb/bench/basic$ ./bench-stlmap.bin -q -r 5 -n 10000\ncrossdb/bench/basic$ ./bench-stlmap.bin -q -r 5 -n 100000\ncrossdb/bench/basic$ ./bench-stlmap.bin -q -r 5 -n 1000000\ncrossdb/bench/basic$ ./bench-stlmap.bin -q -r 5 -n 10000000\n</code></pre> <pre><code>crossdb/bench/basic$ ./bench-crossdb.bin -q -r 5 -n 1000\ncrossdb/bench/basic$ ./bench-crossdb.bin -q -r 5 -n 10000\ncrossdb/bench/basic$ ./bench-crossdb.bin -q -r 5 -n 100000\ncrossdb/bench/basic$ ./bench-crossdb.bin -q -r 5 -n 1000000\ncrossdb/bench/basic$ ./bench-crossdb.bin -q -r 5 -n 10000000\n</code></pre> <p>Note</p> <ul> <li>To ensure fairness in testing, both STL Map and HashMap (unordered_map) use pthread read-write locks, as CrossDB is thread-safe with read-write locks by default. </li> <li><code>std::shared_mutex</code> is not used because, in a single-threaded context, the compiler optimizes the code and omits the lock.</li> <li>CrossDB will support a lockless mode in the future, and the benchmark tool will offer an option to configure the lock mode.</li> </ul> <p>Note</p> <p>Test results will vary depending on the CPU, OS, compiler, and system load. Even on the same server, the results will differ each time.</p>"},{"location":"blog/benchmark/crossdb-vs-stlmap/#test-server","title":"Test Server","text":"<pre><code>CPU         : 11th Gen Intel(R) Core(TM) i7-11700 @ 2.50GHz, Cache size 16384 KB\nOS          : Ubuntu 24.04\nCrossDB     : 0.8.0\nCompiler    : gcc 13.2.0 with -O2 optimization\nc++ std     : c++17\n</code></pre>"},{"location":"blog/benchmark/crossdb-vs-stlmap/#in-memory-db-test-with-int","title":"In-Memory DB Test with INT","text":""},{"location":"blog/benchmark/crossdb-vs-stlmap/#1000-rows","title":"1,000 Rows","text":""},{"location":"blog/benchmark/crossdb-vs-stlmap/#sequential-access-test","title":"Sequential Access Test","text":"DB Access Insert QPS Query QPS Update QPS Delete QPS STL Map 10,442,591 21,776,205 27,627,912 19,777,677 CrossDB STMT 17,773,584 28,868,027 22,767,213 23,593,441 STL HashMap 14,284,640 44,081,055 46,764,986 38,358,974"},{"location":"blog/benchmark/crossdb-vs-stlmap/#random-access-test","title":"Random Access Test","text":"DB Access Insert QPS Query QPS Update QPS Delete QPS STL Map 9,841,660 15,349,472 17,730,115 9,580,807 CrossDB STMT 20,171,189 28,834,741 22,076,943 21,973,314 STL HashMap 14,975,036 42,500,933 48,155,156 36,146,519"},{"location":"blog/benchmark/crossdb-vs-stlmap/#10000-rows","title":"10,000 Rows","text":""},{"location":"blog/benchmark/crossdb-vs-stlmap/#sequential-access-test_1","title":"Sequential Access Test","text":"DB Access Insert QPS Query QPS Update QPS Delete QPS STL Map 8,113,054 16,625,624 19,813,725 22,953,185 CrossDB STMT 14,752,474 28,119,037 22,175,662 22,469,934 STL HashMap 18,570,206 44,608,531 46,079,259 39,167,902"},{"location":"blog/benchmark/crossdb-vs-stlmap/#random-access-test_1","title":"Random Access Test","text":"DB Access Insert QPS Query QPS Update QPS Delete QPS STL Map 8,629,238 8,951,170 9,888,694 6,962,080 CrossDB STMT 16,550,826 26,314,983 21,294,530 21,212,114 STL HashMap 19,087,491 30,989,837 43,464,636 29,057,718"},{"location":"blog/benchmark/crossdb-vs-stlmap/#100000-rows","title":"100,000 Rows","text":""},{"location":"blog/benchmark/crossdb-vs-stlmap/#sequential-access-test_2","title":"Sequential Access Test","text":"DB Access Insert QPS Query QPS Update QPS Delete QPS STL Map 5,145,771 15,298,169 17,967,132 22,018,252 CrossDB STMT 19,700,788 28,480,655 21,548,692 23,305,607 STL HashMap 20,788,054 49,810,428 53,449,199 46,489,166"},{"location":"blog/benchmark/crossdb-vs-stlmap/#random-access-test_2","title":"Random Access Test","text":"DB Access Insert QPS Query QPS Update QPS Delete QPS STL Map 5,815,344 5,163,883 5,531,051 4,941,685 CrossDB STMT 20,411,675 22,748,379 18,789,522 19,783,731 STL HashMap 21,936,850 26,063,150 37,778,169 23,640,037"},{"location":"blog/benchmark/crossdb-vs-stlmap/#1000000-rows","title":"1,000,000 Rows","text":""},{"location":"blog/benchmark/crossdb-vs-stlmap/#sequential-access-test_3","title":"Sequential Access Test","text":"DB Access Insert QPS Query QPS Update QPS Delete QPS STL Map 2,674,488 12,008,803 13,194,472 14,606,515 CrossDB STMT 18,477,686 27,987,661 21,844,773 23,105,578 STL HashMap 20,543,816 48,752,370 49,362,932 45,854,590"},{"location":"blog/benchmark/crossdb-vs-stlmap/#random-access-test_3","title":"Random Access Test","text":"DB Access Insert QPS Query QPS Update QPS Delete QPS STL Map 3,655,302 1,868,468 2,006,574 1,829,826 CrossDB STMT 18,610,416 6,568,603 6,631,045 6,341,988 STL HashMap 22,427,027 7,474,584 10,213,001 6,075,652"},{"location":"blog/benchmark/crossdb-vs-stlmap/#10000000-rows","title":"10,000,000 Rows","text":""},{"location":"blog/benchmark/crossdb-vs-stlmap/#sequential-access-test_4","title":"Sequential Access Test","text":"DB Access Insert QPS Query QPS Update QPS Delete QPS STL Map 1,722,853 7,860,464 7,879,262 9,947,688 CrossDB STMT 17,671,148 26,329,139 20,146,554 20,992,326 STL HashMap 20,558,213 48,890,089 49,051,956 45,776,292"},{"location":"blog/benchmark/crossdb-vs-stlmap/#random-access-test_4","title":"Random Access Test","text":"DB Access Insert QPS Query QPS Update QPS Delete QPS STL Map 2,154,541 1,035,817 1,041,939 1,094,936 CrossDB STMT 18,768,313 4,923,951 4,299,394 4,622,262 STL HashMap 22,269,633 6,651,748 8,840,238 4,838,402"},{"location":"client/api-c/","title":"C APIs","text":""},{"location":"client/api-c/#apis-list","title":"APIs List","text":"API Description xdb_conn_t* xdb_open (const char *path) Open a connection for local DB direct access xdb_conn_t* xdb_connect (const char *host, const char *user, const char *pass, const char *db, uint16_t port) Connect CrossDB Server void xdb_close (xdb_conn_t *pConn) Close a connection xdb_res_t* xdb_exec (xdb_conn_t* pConn, const char *sql) Execute SQL statement xdb_res_t* xdb_next_result (xdb_conn_t *pConn) Get next SQL statement result bool xdb_more_result (xdb_conn_t* pRes) Check is there more result void xdb_free_result (xdb_res_t* pRes) Free result set xdb_errno_e xdb_errcode(xdb_res_t *pRes) Get error code int xdb_column_count (xdb_res_t *pRes) Get column count xdb_type_t xdb_column_type (xdb_res_t *pRes, uint16_t iCol) Get column type const char* xdb_column_name (xdb_res_t *pRes, uint16_t iCol) Get column name int xdb_column_id (xdb_res_t *pRes, const char *name) Get column ID xdb_rowid xdb_row_count (xdb_res_t* pRes) Get row count xdb_rowid xdb_affected_rows (xdb_res_t* pRes) Get affected rows xdb_row_t* xdb_fetch_row (xdb_res_t* pRes) Fetch one row bool xdb_column_null (xdb_res_t *pRes, void *pRow, uint16_t iCol) If column is NULL bool xdb_column_bool (xdb_res_t *pRes, void *pRow, uint16_t iCol) Get bool column from row int xdb_column_int (xdb_res_t *pRes, void *pRow, uint16_t iCol) Get int column from row float xdb_column_float (xdb_res_t *pRes, void *pRow, uint16_t iCol) Get float/double column from row const char * xdb_column_str (xdb_res_t *pRes, void *pRow, uint16_t iCol) Get string column from row const void * xdb_column_blob (xdb_res_t *pRes, xdb_row_t *pRow, uint16_t iCol, int *pLen) Get binary column from row xdb_mac_t xdb_column_mac (xdb_res_t *pRes, void *pRow, uint16_t iCol) Get mac column from row xdb_inet_t xdb_column_inet (xdb_res_t *pRes, void *pRow, uint16_t iCol) Get inet column from row bool xdb_col_null (xdb_res_t *pRes, void *pRow, const char *name) If column is NULL bool xdb_col_bool (xdb_res_t *pRes, void *pRow, const char *name) Get bool column from row int xdb_col_int (xdb_res_t *pRes, void *pRow, const char *name) Get int column from row float xdb_col_float (xdb_res_t *pRes, void *pRow, const char *name) Get float/double column from row const char * xdb_col_str (xdb_res_t *pRes, void *pRow, const char *name) Get string column from row const void * xdb_col_blob (xdb_res_t *pRes, xdb_row_t *pRow, const char *name, int *pLen) Get binary column from row xdb_mac_t xdb_col_mac (xdb_res_t *pRes, void *pRow, const char *name) Get mac column from row xdb_inet_t xdb_col_inet (xdb_res_t *pRes, void *pRow,const char *name) Get inet column from row xdb_stmt_t* xdb_stmt_prepare (xdb_conn_t* pConn, const char *sql) Prepare statement xdb_ret xdb_bind_int (xdb_stmt_t *pStmt, uint16_t para_id, int val) Bind int value xdb_ret xdb_bind_float (xdb_stmt_t *pStmt, uint16_t para_id, float val) Bind float value xdb_ret xdb_bind_str (xdb_stmt_t *pStmt, uint16_t para_id, const char *str) Bind string value xdb_ret xdb_clear_bindings (xdb_stmt_t *pStmt) Clear bindings xdb_res_t* xdb_stmt_exec (xdb_stmt_t *pStmt) Execute prepared SQL statement void xdb_stmt_close (xdb_stmt_t *pStmt) Free prepared SQL statement xdb_ret xdb_begin (xdb_conn_t* pConn) Begin transaction xdb_ret xdb_commit (xdb_conn_t* pConn) Commit transaction xdb_ret xdb_rollback (xdb_conn_t* pConn) Rollback transaction xdb_ret xdb_create_func (const char *name, xdb_func_e type, const char *lang, void *cb_func, void *pArg) Create function const char * xdb_type2str (xdb_type_t type) Get data type string const char * xdb_errmsg (xdb_res_t *pRes) Get error/information message int xdb_print_row (xdb_res_t *pRes, void *pRow, int format) Print row to console const char * xdb_version () Get CrossDB version string"},{"location":"client/api-c/#xdb_open","title":"xdb_open","text":"<p>Open a connection and create/open a local Database.</p> <pre><code>xdb_conn_t*\nxdb_open (const char *path);\n\n// TBD\nxdb_conn_t*\nxdb_open2 (const char *path, uint32_t flags);\n</code></pre> <ul> <li>If <code>path</code> is <code>:memory:</code> will create or open a memory database, else create or open a on-disk database. This database will be the default DB of this connection.</li> <li>If <code>path</code> is <code>NULL</code>: Only open a connection. User has to use <code>OPEN DATABASE '[path/]db_name'</code> or <code>CREATE DATABASE '[path/]db_name'</code> or <code>USE DATABASE db_name</code>.</li> <li>One thread can use only one connection. One connection can only be used by one thread</li> <li>All opened databases are shared with all opened connections, and they can <code>USE DATABASE db_name</code> to switch connection default DB.</li> </ul>"},{"location":"client/api-c/#xdb_connect","title":"xdb_connect","text":"<p>Connect CrossDB Server.</p> <pre><code>xdb_conn_t*\nxdb_connect (const char *host, const char *user, const char *pass, const char *db, uint16_t port);\n</code></pre> <ul> <li><code>host</code> is NULL will connect CrossDB server on same host.</li> <li><code>user</code> and <code>pass</code> are not implemented yet.</li> <li><code>port</code> = 0 will call <code>xdb_open</code> and pass <code>db</code> as <code>path</code>.</li> <li>One thread can use only one connection. One connection can only be used by one thread</li> <li>If db is NULL, can <code>USE DATABASE db_name</code> to switch connection default DB.</li> </ul>"},{"location":"client/api-c/#xdb_close","title":"xdb_close","text":"<p>Create a connection.</p> <pre><code>void\nxdb_close (xdb_conn_t *pConn);\n</code></pre>"},{"location":"client/api-c/#xdb_exec","title":"xdb_exec","text":"<p>Execute SQL statement and return result set.</p> <pre><code>xdb_res_t*\nxdb_exec (xdb_conn_t* pConn, const char *sql);\n\nxdb_res_t*\nxdb_exec2 (xdb_conn_t *pConn, const char *sql, int len);\n\n// Use '?' to bind args then execute, only support single statement\nxdb_res_t*\nxdb_bexec (xdb_conn_t *pConn, const char *sql, ...);\n\nxdb_res_t*\nxdb_vbexec (xdb_conn_t *pConn, const char *sql, va_list ap);\n\n// Use '%' to format args then execute, supports multi-statements\nxdb_res_t*\nxdb_pexec (xdb_conn_t *pConn, const char *sql, ...);\n</code></pre> <ul> <li>A valid xdb_res_t pointer is returned always.</li> <li><code>xdb_errcode(pRes)</code>:  if <code>xdb_errcode(pRes)</code> = 0, then can use <code>xdb_errmsg(pRes)</code> to get the error message.</li> <li>row count: <code>xdb_row_count(pRes)</code> for query statement</li> <li>affected rows: <code>xdb_affected_rows(pRes)</code> for <code>INSERT</code> <code>UPDATE</code> <code>DELETE</code> rows </li> <li>column count: <code>xdb_column_count(pRes</code> for query statement</li> <li>For <code>xdb_pexec</code>, if <code>sql</code> contains <code>%</code>, should use escape <code>\\%</code>.</li> </ul>"},{"location":"client/api-c/#xdb_next_result","title":"xdb_next_result","text":"<p>Get next SQL statement result</p> <p>Return NULL if no more result</p> <pre><code>xdb_res_t*\nxdb_next_result (xdb_conn_t *pConn);\n</code></pre>"},{"location":"client/api-c/#xdb_more_result","title":"xdb_more_result","text":"<p>Check is there more result</p> <pre><code>bool\nxdb_more_result (xdb_conn_t *pConn);\n</code></pre>"},{"location":"client/api-c/#xdb_free_result","title":"xdb_free_result","text":"<p>Free result set</p> <pre><code>void\nxdb_free_result (xdb_res_t *pRes);\n</code></pre> <p>Note</p> <p>You only need to call <code>xdb_free_result</code> for query statements with errcode=0.</p>"},{"location":"client/api-c/#xdb_errcode","title":"xdb_errcode","text":"<p>Get error code</p> <pre><code>xdb_errno_e\nxdb_errcode (xdb_res_t *pRes);\n</code></pre>"},{"location":"client/api-c/#xdb_column_count","title":"xdb_column_count","text":"<p>Get column count</p> <pre><code>int\nxdb_column_count (xdb_res_t *pRes);\n</code></pre>"},{"location":"client/api-c/#xdb_column_type","title":"xdb_column_type","text":"<p>Get column type.</p> <pre><code>xdb_type_t \nxdb_column_type (xdb_res_t *pRes, uint16_t iCol);\n</code></pre>"},{"location":"client/api-c/#xdb_column_name","title":"xdb_column_name","text":"<p>Get column name.</p> <pre><code>const char* \nxdb_column_name (xdb_res_t *pRes, uint16_t iCol);\n</code></pre> <p>Get column ID.</p> <pre><code>int \nxdb_column_id (xdb_res_t *pRes, const char *name);\n</code></pre>"},{"location":"client/api-c/#xdb_fetch_row","title":"xdb_fetch_row","text":"<p>Fetch one row and return row list array.</p> <pre><code>xdb_row_t*\nxdb_fetch_row (xdb_res_t *pRes);\n</code></pre>"},{"location":"client/api-c/#xdb_row_count","title":"xdb_row_count","text":"<p>Get row count.</p> <pre><code>xdb_rowid\nxdb_row_count (xdb_res_t *pRes);\n</code></pre>"},{"location":"client/api-c/#xdb_affected_rows","title":"xdb_affected_rows","text":"<p>Get row count.</p> <pre><code>xdb_rowid\nxdb_affected_rows (xdb_res_t *pRes);\n</code></pre>"},{"location":"client/api-c/#xdb_column_null","title":"xdb_column_null","text":"<p>If column value is NULL. <pre><code>bool \nxdb_column_null (xdb_res_t *pRes, xdb_row_t *pRow, uint16_t iCol);\n</code></pre></p>"},{"location":"client/api-c/#xdb_column_bool","title":"xdb_column_bool","text":"<p>Get bool column from row. <pre><code>bool \nxdb_column_bool (xdb_res_t *pRes, xdb_row_t *pRow, uint16_t iCol);\n</code></pre></p>"},{"location":"client/api-c/#xdb_column_int","title":"xdb_column_int","text":"<p>Get int column from row. <pre><code>int \nxdb_column_int (xdb_res_t *pRes, void *pRow, uint16_t iCol);\n\nint64_t \nxdb_column_int64 (xdb_res_t *pRes, void *pRow, uint16_t iCol);\n</code></pre></p>"},{"location":"client/api-c/#xdb_column_float","title":"xdb_column_float","text":"<p>Get float column from row.</p> <pre><code>float\nxdb_column_float (xdb_res_t *pRes, xdb_row_t *pRow, uint16_t iCol);\n\ndouble \nxdb_column_double (xdb_res_t *pRes, void *pRow, uint16_t iCol);\n</code></pre>"},{"location":"client/api-c/#xdb_column_str","title":"xdb_column_str","text":"<p>Get string column from row.</p> <pre><code>const char*\nxdb_column_str (xdb_res_t *pRes, xdb_row_t *pRow, uint16_t iCol);\n\nconst char*\nxdb_column_str2 (xdb_res_t *pRes, xdb_row_t *pRow, uint16_t iCol, int *pLen);\n</code></pre>"},{"location":"client/api-c/#xdb_column_blob","title":"xdb_column_blob","text":"<p>Get blob column from row.</p> <pre><code>const void*\nxdb_column_blob (xdb_res_t *pRes, xdb_row_t *pRow, uint16_t iCol, int *pLen);\n</code></pre>"},{"location":"client/api-c/#xdb_column_mac","title":"xdb_column_mac","text":"<p>Get mac column from row. <pre><code>const xdb_mac_t*\nxdb_column_mac (xdb_res_t *pRes, xdb_row_t *pRow, uint16_t iCol);\n</code></pre></p>"},{"location":"client/api-c/#xdb_column_inet","title":"xdb_column_inet","text":"<p>Get inet column from row. <pre><code>const xdb_inet_t*\nxdb_column_inet (xdb_res_t *pRes, xdb_row_t *pRow, uint16_t iCol);\n</code></pre></p>"},{"location":"client/api-c/#xdb_col_null","title":"xdb_col_null","text":"<p>If column value is NULL. <pre><code>bool \nxdb_col_null (xdb_res_t *pRes, xdb_row_t *pRow, const char *name);\n</code></pre></p>"},{"location":"client/api-c/#xdb_col_bool","title":"xdb_col_bool","text":"<p>Get bool column from row. <pre><code>bool \nxdb_col_bool (xdb_res_t *pRes, xdb_row_t *pRow, const char *name);\n</code></pre></p>"},{"location":"client/api-c/#xdb_col_int","title":"xdb_col_int","text":"<p>Get int column from row. <pre><code>int \nxdb_col_int (xdb_res_t *pRes, void *pRow, const char *name);\n\nint64_t \nxdb_col_int64 (xdb_res_t *pRes, void *pRow, const char *name);\n</code></pre></p>"},{"location":"client/api-c/#xdb_col_float","title":"xdb_col_float","text":"<p>Get float column from row.</p> <pre><code>float\nxdb_col_float (xdb_res_t *pRes, xdb_row_t *pRow, const char *name);\n\ndouble \nxdb_col_double (xdb_res_t *pRes, void *pRow, const char *name);\n</code></pre>"},{"location":"client/api-c/#xdb_col_str","title":"xdb_col_str","text":"<p>Get string column from row.</p> <pre><code>const char*\nxdb_col_str (xdb_res_t *pRes, xdb_row_t *pRow, const char *name);\n\nconst char*\nxdb_col_str2 (xdb_res_t *pRes, xdb_row_t *pRow, const char *name, int *pLen);\n</code></pre>"},{"location":"client/api-c/#xdb_col_blob","title":"xdb_col_blob","text":"<p>Get blob column from row.</p> <pre><code>const void*\nxdb_col_blob (xdb_res_t *pRes, xdb_row_t *pRow, const char *name, int *pLen);\n</code></pre>"},{"location":"client/api-c/#xdb_col_mac","title":"xdb_col_mac","text":"<p>Get mac column from row. <pre><code>const xdb_mac_t*\nxdb_col_mac (xdb_res_t *pRes, xdb_row_t *pRow, const char *name);\n</code></pre></p>"},{"location":"client/api-c/#xdb_col_inet","title":"xdb_col_inet","text":"<p>Get inet column from row. <pre><code>const xdb_inet_t*\nxdb_col_inet (xdb_res_t *pRes, xdb_row_t *pRow, const char *name);\n</code></pre></p>"},{"location":"client/api-c/#xdb_stmt_prepare","title":"xdb_stmt_prepare","text":"<pre><code>xdb_stmt_t* \nxdb_stmt_prepare (xdb_conn_t* pConn, const char *sql);\n</code></pre>"},{"location":"client/api-c/#xdb_bind_int","title":"xdb_bind_int","text":"<p>Binds an int value to the prepared statement at the specified parameter index (from 1).</p> <pre><code>xdb_ret\nxdb_bind_int (xdb_stmt_t *pStmt, uint16_t para_id, int val);\n\nxdb_ret\nxdb_bind_int64 (xdb_stmt_t *pStmt, uint16_t para_id, int64_t val);\n</code></pre>"},{"location":"client/api-c/#xdb_bind_float","title":"xdb_bind_float","text":"<p>Binds a double value to the prepared statement at the specified parameter index (from 1).</p> <pre><code>xdb_ret\nxdb_bind_float (xdb_stmt_t *pStmt, uint16_t para_id, float val);\n\nxdb_ret\nxdb_bind_double (xdb_stmt_t *pStmt, uint16_t para_id, double val)\n</code></pre>"},{"location":"client/api-c/#xdb_bind_str","title":"xdb_bind_str","text":"<p>Binds a string value to the prepared statement at the specified parameter index (from 1).</p> <pre><code>xdb_ret\nxdb_bind_str (xdb_stmt_t *pStmt, uint16_t id, const char *str, int len);\n\nxdb_ret\nxdb_bind_str2 (xdb_stmt_t *pStmt, uint16_t para_id, const char *str, int len)\n</code></pre>"},{"location":"client/api-c/#xdb_clear_bindings","title":"xdb_clear_bindings","text":"<p>Clear bindings.</p> <pre><code>xdb_ret\nxdb_clear_bindings (xdb_stmt_t *pStmt);\n</code></pre> <p>Note</p> <p>If you bind all args, don't need to call this APIs.</p>"},{"location":"client/api-c/#xdb_stmt_exec","title":"xdb_stmt_exec","text":"<p>Execute a prepared statement.</p> <pre><code>// use binding APIs first then execute\nxdb_res_t*\nxdb_stmt_exec (xdb_stmt_t *pStmt);\n\n// bind args then execute\nxdb_res_t*\nxdb_stmt_bexec (xdb_stmt_t *pStmt, ...);\n\nxdb_res_t*\nxdb_stmt_vbexec (xdb_stmt_t *pStmt, va_list ap);\n</code></pre> <p>Result refers xdb_exec</p>"},{"location":"client/api-c/#xdb_stmt_close","title":"xdb_stmt_close","text":"<p>Close a prepared statement.</p> <pre><code>void\nxdb_stmt_close (xdb_stmt_t *pStmt);\n</code></pre>"},{"location":"client/api-c/#xdb_begin","title":"xdb_begin","text":"<p>Begin a transaction.</p> <pre><code>xdb_ret\nxdb_begin (xdb_conn_t* pConn);\n</code></pre> <ul> <li>For embedded local connection, always return <code>XDB_OK</code>.</li> </ul>"},{"location":"client/api-c/#xdb_commit","title":"xdb_commit","text":"<p>Commit a transaction.</p> <pre><code>xdb_ret\nxdb_commit (xdb_conn_t* pConn);\n</code></pre> <ul> <li>For embedded local connection, always return <code>XDB_OK</code>.</li> </ul>"},{"location":"client/api-c/#xdb_rollback","title":"xdb_rollback","text":"<p>Rollback a transaction.</p> <pre><code>xdb_ret\nxdb_rollback (xdb_conn_t* pConn);\n</code></pre> <ul> <li>For embedded local connection, always return <code>XDB_OK</code>.</li> </ul>"},{"location":"client/api-c/#xdb_create_func","title":"xdb_create_func","text":"<p>Create function.</p> <pre><code>typedef int (*xdb_trig_callback) (xdb_conn_t *pConn, xdb_res_t *pRes, xdb_trig_e type, xdb_row_t *pNewRow, xdb_row_t *pOldRow, void *pArg);\n\ntypedef enum {\n    XDB_FUNC_TRIG,\n    XDB_FUNC_MAX,\n} xdb_func_e;\n\nxdb_ret \nxdb_create_func (const char *name, xdb_func_e type, const char *lang, void *cb_func, void *pArg);\n</code></pre>"},{"location":"client/api-c/#xdb_type2str","title":"xdb_type2str","text":"<p>Get data type string.</p> <pre><code>const char*\nxdb_type2str (xdb_type_t type);\n</code></pre>"},{"location":"client/api-c/#xdb_errmsg","title":"xdb_errmsg","text":"<p>Get error/information message in result.</p> <pre><code>const char *\nxdb_errmsg (xdb_res_t *pRes);\n</code></pre>"},{"location":"client/api-c/#xdb_print_row","title":"xdb_print_row","text":"<p>Print row to console.</p> <pre><code>int \nxdb_print_row (xdb_res_t *pRes, xdb_row_t *pRow, int format);\n</code></pre>"},{"location":"client/api-c/#xdb_version","title":"xdb_version","text":"<p>Get CrossDB version string.</p> <pre><code>const char*\nxdb_version();\n</code></pre>"},{"location":"client/api-c/#types","title":"Types","text":""},{"location":"client/api-c/#xdb_errno_e","title":"xdb_errno_e","text":"<p>Error Code <pre><code>typedef enum {\n    XDB_OK,\n    XDB_ERROR,\n    XDB_E_PARAM,\n    XDB_E_STMT,\n    XDB_E_NODB,\n    XDB_E_NOTFOUND,\n    XDB_E_EXISTS,\n    XDB_E_FULL,\n    XDB_E_CONSTRAINT,\n    XDB_E_AUTH,\n    XDB_E_MEMORY,\n    XDB_E_FILE,\n    XDB_E_SOCK,\n} xdb_errno_e;\n</code></pre></p>"},{"location":"client/api-c/#xdb_type_t","title":"xdb_type_t","text":"<p>Data Types <pre><code>typedef enum {\n    XDB_TYPE_NULL       = 0,  // 1 bit\n    XDB_TYPE_TINYINT    = 1,  // 1 byte\n    XDB_TYPE_SMALLINT   = 2,  // 2 bytes\n    XDB_TYPE_INT        = 3,  // 4 bytes\n    XDB_TYPE_BIGINT     = 4,  // 8 bytes\n    XDB_TYPE_UTINYINT   = 5,  // 1 byte\n    XDB_TYPE_USMALLINT  = 6,  // 2 bytes\n    XDB_TYPE_UINT       = 7,  // 4 bytes\n    XDB_TYPE_UBIGINT    = 8,  // 8 bytes\n    XDB_TYPE_FLOAT      = 9,  // 4 bytes\n    XDB_TYPE_DOUBLE     = 10, // 8 bytes\n    XDB_TYPE_TIMESTAMP  = 11, // 8 bytes\n    XDB_TYPE_CHAR       = 12, // fixed-length string(at most 65535 byte)\n    XDB_TYPE_BINARY     = 13, // fixed-length binary(at most 65535 byte)\n    XDB_TYPE_VCHAR      = 14, // varied-length string(at most 65535 byte)\n    XDB_TYPE_VBINARY    = 15, // varied-length binary(at most 65535 byte)\n    XDB_TYPE_BOOL       = 16, // 1 byte\n    XDB_TYPE_INET       = 17, // 18 bytes\n    XDB_TYPE_MAC        = 18, // 6 bytes\n    XDB_TYPE_MAX        = 21\n} xdb_type_t;\n</code></pre></p>"},{"location":"client/api-c/#structures","title":"Structures","text":""},{"location":"client/api-c/#xdb_inet_t","title":"xdb_inet_t","text":"<pre><code>typedef struct {\n    uint8_t     mask;\n    uint8_t     family; // 4=ipv4, 6=ipv6 \n    uint8_t     addr[16];\n} xdb_inet_t;\n</code></pre>"},{"location":"client/api-c/#xdb_mac_t","title":"xdb_mac_t","text":"<pre><code>typedef struct {\n    uint8_t     addr[6];\n} xdb_mac_t;\n</code></pre>"},{"location":"client/api-nodejs/","title":"NodeJS","text":"<p>@croosdb/crossdb-nodejs</p>"},{"location":"client/api-nodejs/#apis-list","title":"APIs List","text":"API Description new new (<code>:memory:</code> | <code>[path/]db_name</code>) Open a connection for local DB direct access exec exec (<code>statement</code>) Execute SQL statement begin begin () Begin transaction commit commit () Commit transaction rollback rollback () Rollback transaction close close () Close a connection version version () Get CrossDB version info"},{"location":"client/api-nodejs/#new","title":"new","text":"<p>Open a connection and create/open a local Database.</p> <pre><code>const CrossDB = require(\"@croosdb/crossdb-nodejs\");\n\nconst db = new CrossDB(\":memory:\");\n// or\nconst db = new CrossDB(\"[path/]db_name\");\n</code></pre> <ul> <li>If path is :memory:, a memory database is created or opened, becoming the default database for this connection.</li> <li>If path specifies [path/]db_name, a database at the given path is created or opened.</li> <li>All databases opened are shared across all active connections.</li> </ul>"},{"location":"client/api-nodejs/#exec","title":"exec","text":"<p>Execute SQL statement and return result set.</p> <pre><code>// Create tables if they do not already exist\ndb.exec(\n  \"CREATE TABLE IF NOT EXISTS student (id INT PRIMARY KEY, name CHAR(16), age INT, class CHAR(16), score FLOAT, info VARCHAR(255))\"\n);\n// Clean (empty) a table\ndb.exec(\"DELETE FROM student\");\n// Insert sample data into the table\ndb.exec(\n  \"INSERT INTO student (id,name,age,class,score) VALUES (1,'jack',10,'3-1',90),(2,'tom',11,'2-5',91),(3,'jack',11,'1-6',92),(4,'rose',10,'4-2',90),(5,'tim',10,'3-1',95)\"\n);\n// Query to select all records from the table\n\nlet res = db.exec(\"SELECT * FROM student\");\nres.forEach((element, i) =&gt; {\n  console.log(i, \"Select all records: \", element);\n});\n// Execute multiple statements\nres = db.exec(\n  \"SELECT COUNT(*) as Count FROM student; SELECT id, name, age FROM student WHERE id=2;SELECT MIN(score) as min, MAX(score) as max, SUM(score) as sum, AVG(score) as avg FROM student\"\n);\nres.forEach((element, i) =&gt; {\n  console.log(i, \"Multi-statement result: \", element);\n});\n</code></pre> <p>In SQL, the behavior of statements regarding result sets is as follows:</p> <ul> <li>SELECT Statements: These retrieve data and return a result set comprising the selected rows.</li> <li>Non-SELECT Statements: Statements like INSERT, UPDATE, and DELETE modify data and typically do not return a result set. Instead, they provide the number of rows affected.</li> </ul> <p>When executing multiple statements sequentially:</p> <ul> <li>Multiple SELECT Statements: Each SELECT returns its own result set in the order of execution.</li> <li>Mixed Statements: Only SELECT statements return result sets, each corresponding to its position in the sequence. Non-SELECT statements do not return result sets but indicate the number of rows affected.</li> </ul>"},{"location":"client/api-nodejs/#begin","title":"begin","text":"<p>Begin a transaction.</p> <pre><code>begin();\n</code></pre>"},{"location":"client/api-nodejs/#commit","title":"commit","text":"<p>Commit a transaction.</p> <pre><code>commit();\n</code></pre>"},{"location":"client/api-nodejs/#rollback","title":"rollback","text":"<p>Rollback a transaction.</p> <pre><code>rollback();\n</code></pre>"},{"location":"client/api-nodejs/#close","title":"close","text":"<p>Close connection.</p> <pre><code>close();\n</code></pre>"},{"location":"client/api-nodejs/#version","title":"version","text":"<p>Get CrossDB version string.</p> <pre><code>version();\n</code></pre> <p>Return this object:</p> <ul> <li>\"CroosDB\": CroosDB version.</li> <li>\"Package\": Node.js package version,</li> <li>\"Platform\": Platform information</li> </ul> <pre><code>{\n  \"CroosDB\": \"0.11.0\",\n  \"Package\": \"1.4.1\",\n  \"Platform\": \"darwin\"\n}\n</code></pre>"},{"location":"client/api-python/","title":"Python","text":"<p>TBD</p>"},{"location":"develop/connect/","title":"Connect to CrossDB","text":"<p>You need a connection instance to connect to CrossDB, and all operations will use this connection handle.</p> <ul> <li>Each thread can use only one connection, and each connection can be used by only one thread.</li> <li>All opened databases are shared among all opened connections, and you can use <code>USE DATABASE db_name</code> command to switch the connection's default database.</li> </ul>"},{"location":"develop/connect/#connection-modes","title":"Connection Modes","text":"<ul> <li>Embedded mode (local connections)</li> <li>Server mode (remote connections over TCP/IP)</li> <li>Mixed mode (local and remote connections at the same time)</li> </ul>"},{"location":"develop/connect/#connect-to-embedded-database","title":"Connect to Embedded Database","text":"<ul> <li>Open a connection</li> </ul> <pre><code>xdb_conn_t *pConn = xdb_open (NULL);\n</code></pre> <p>Note</p> <p>User has to use <code>OPEN DATABASE '[path/]db_name'</code> or <code>CREATE DATABASE '[path/]db_name'</code> or <code>USE DATABASE db_name</code>.</p> <ul> <li>Open a connection and create a default memory database if not exist</li> </ul> <pre><code>xdb_conn_t *pConn = xdb_open (\":memory:\");\n</code></pre> <ul> <li>Open a connection and create a on-disk database <code>school</code> if not exist as the default database</li> </ul> <pre><code>//  In current folder\nxdb_conn_t *pConn = xdb_open (\"school\");\n</code></pre> <pre><code>// In specified folder\nxdb_conn_t *pConn = xdb_open (\"/var/crossdb/school\");\n</code></pre>"},{"location":"develop/connect/#connect-to-crossdb-server","title":"Connect to CrossDB Server","text":"<ul> <li>Connect to local host CrossDB Server</li> </ul> <pre><code>xdb_conn_t *pConn = xdb_connect (NULL, NULL, NULL, NULL, 7777);\n</code></pre> <ul> <li>Connect to remote host CrossDB Server</li> </ul> <pre><code>xdb_conn_t *pConn = xdb_connect (\"192.168.1.1\", NULL, NULL, NULL, 7777);\n</code></pre> <p>Set current DB</p> <pre><code>xdb_conn_t *pConn = xdb_connect (\"192.168.1.1\", NULL, NULL, \"school\", 7777);\n</code></pre>"},{"location":"develop/ddl/","title":"Data Model","text":""},{"location":"develop/ddl/#create-and-use-a-database","title":"Create and Use a Database","text":"SQLC <pre><code>-- Create database in current folder\nCREATE DATABASE school;\n-- Create database in specified folder (must exist)\nCREATE DATABASE '/var/crossdb/school';\n-- Create in-memory database \nCREATE DATABASE test ENGINE=memory;\n</code></pre> <pre><code>// Create database in current folder\nxdb_res_t *pRes = xdb_exec (pConn, \"CREATE DATABASE school\");\n// Create database in specified folder (must exist)\nxdb_res_t *pRes = xdb_exec (pConn, \"CREATE DATABASE '/var/crossdb/school'\");\n// Create in-memory database \nxdb_res_t *pRes = xdb_exec (pConn, \"CREATE DATABASE test ENGINE=memory\");\n</code></pre>"},{"location":"develop/ddl/#create-a-table","title":"Create a Table","text":"SQLC <pre><code>CREATE TABLE IF NOT EXISTS student (id INT PRIMARY KEY, name CHAR(16), age INT, class CHAR(16), score FLOAT, info CHAR(256), INDEX (name));\nCREATE TABLE IF NOT EXISTS teacher (id INT PRIMARY KEY, name CHAR(16), age INT, info CHAR(256), INDEX (name));\nCREATE TABLE IF NOT EXISTS book (id INT PRIMARY KEY, name CHAR(64), author CHAR(32), count INT, INDEX (name));\n</code></pre> <pre><code>xdb_res_t *pRes = pRes = xdb_exec (pConn, \"CREATE TABLE IF NOT EXISTS student (id INT PRIMARY KEY, name CHAR(16), age INT, class CHAR(16), score FLOAT, info CHAR(256), INDEX (name))\");\nxdb_res_t *pRes = pRes = xdb_exec (pConn, \"CREATE TABLE IF NOT EXISTS teacher (id INT PRIMARY KEY, name CHAR(16), age INT, info CHAR(256), INDEX (name))\");\nxdb_res_t *pRes = pRes = xdb_exec (pConn, \"CREATE TABLE IF NOT EXISTS book (id INT PRIMARY KEY, name CHAR(64), author CHAR(32), count INT, INDEX (name))\");\n</code></pre>"},{"location":"develop/ddl/#create-index","title":"Create Index","text":"SQLC <pre><code>CREATE INDEX idx_name ON student (age);\nCREATE INDEX idx_name ON teacher (age);\nCREATE INDEX idx_name ON student (author);\n</code></pre> <pre><code>xdb_res_t *pRes = pRes = xdb_exec (pConn, \"CREATE INDEX idx_name ON student (age)\");\nxdb_res_t *pRes = pRes = xdb_exec (pConn, \"CREATE INDEX idx_name ON teacher (age)\");\nxdb_res_t *pRes = pRes = xdb_exec (pConn, \"CREATE INDEX idx_name ON student (author)\");\n</code></pre>"},{"location":"develop/dml/","title":"Data Manipulation","text":""},{"location":"develop/dml/#insert-rows","title":"Insert Rows","text":"SQLC <pre><code>INSERT INTO student (id,name,age,class,score) VALUES (1,'jack',10,'3-1',90),(2,'tom',11,'2-5',91),(3,'jack',11,'1-6',92),(4,'rose',10,'4-2',90),(5,'tim',10,'3-1',95);\n\nINSERT INTO student (id,name,age,class,score,info) VALUES (6,'Tony',10,'3-1',95,'%s')\", 'He is a boy.\\nHe likes playing football.\\nWe all like him!');\n</code></pre> <pre><code>pRes = xdb_exec (pConn, \"INSERT INTO student (id,name,age,class,score) VALUES (1,'jack',10,'3-1',90),(2,'tom',11,'2-5',91),(3,'jack',11,'1-6',92),(4,'rose',10,'4-2',90),(5,'tim',10,'3-1',95)\");\n\npRes = xdb_pexec (pConn, \"INSERT INTO student (id,name,age,class,score,info) VALUES (6,'Tony',10,'3-1',95,'%s')\", \"He is a boy.\\nHe likes playing football.\\nWe all like him!\");\n</code></pre>"},{"location":"develop/dml/#update-rows","title":"Update Rows","text":"SQLC <pre><code>UPDATE student set age=9 WHERE id = 2;\n</code></pre> <pre><code>pRes = xdb_exec (pConn, \"UPDATE student set age=9 WHERE id = 2\");\n\npRes = xdb_pexec (pConn, \"UPDATE student set age=9 WHERE id = %d\", id);\n</code></pre>"},{"location":"develop/dml/#delete-rows","title":"Delete Rows","text":"SQLC <pre><code>DELETE FROM student WHERE id = 3;\n</code></pre> <pre><code>pRes = xdb_exec (pConn, \"DELETE FROM student WHERE id = 3\");\n\npRes = xdb_pexec (pConn, \"DELETE FROM student WHERE id = %d\", id);\n</code></pre>"},{"location":"develop/multi-stmts/","title":"Multi-Statements","text":"<p>The Multi-Statements feature can significantly improve performance, especially in client-server mode. By running a batch of statements in one query, you can retrieve results one by one in parallel. In databases that do not support Multi-Statements, you must send one statement, wait for the result, and then send the next one. This process results in lower performance, particularly when network latency is high.</p> SQLC <pre><code>SELECT COUNT(*) FROM student; SELECT id,name FROM student WHERE id=2;\n</code></pre> <pre><code>pRes = xdb_exec (pConn, \"SELECT COUNT(*) FROM student; SELECT id,name FROM student WHERE id=2\");\nprintf (\"-- 1st result: \");\nif (NULL != (pRow = xdb_fetch_row (pRes))) {\n    xdb_print_row (pRes, pRow, 0);\n    printf (\"\\n\");\n}\nxdb_free_result (pRes);\nprintf (\"-- 2nd result: \");\npRes = xdb_next_result (pConn);\nif (NULL != pRes) {\n    if (NULL != (pRow = xdb_fetch_row (pRes))) {\n        xdb_print_row (pRes, pRow, 0);\n        printf (\"\\n\");\n    }\n    xdb_free_result (pRes);\n}\n</code></pre>"},{"location":"develop/prep-stmts/","title":"Prepared Statements","text":"<p>Prepared Statements can save SQL parsing time and improve performance.</p> <p>Note</p> <p>Now only support <code>INSERT</code>, <code>SELECT</code> <code>UPDATE</code> <code>DELETE</code> statements.</p>"},{"location":"develop/prep-stmts/#steps","title":"Steps","text":"<ul> <li> <p>Create Prepared Statements</p> <pre><code>xdb_stmt_t *pStmt = xdb_stmt_prepare (pConn, \"SELECT * FROM student WHERE id=?\");\n</code></pre> </li> <li> <p>Method A: Execute with Args</p> <pre><code>xdb_res_t *pRes = xdb_stmt_bexec (pStmt, id);\n</code></pre> </li> <li> <p>Method B: Bind then Execute</p> <ul> <li>Bind parameters</li> </ul> <pre><code>xdb_bind_int (pStmt, 1, id);\n</code></pre> <p>NOTE Bind parameter id starts from 1. </p> <ul> <li>Execute prepared statements</li> </ul> <pre><code>xdb_res_t *pRes = xdb_stmt_exec (pStmt);\n</code></pre> </li> <li> <p>Close statements</p> <pre><code>xdb_stmt_close (pStmt);\n</code></pre> </li> </ul>"},{"location":"develop/prep-stmts/#insert","title":"Insert","text":"Execute with ArgsBind then Execute <pre><code>xdb_stmt_t *pStmt = xdb_stmt_prepare (pConn, \"INSERT INTO student (id,name,age,class,score) VALUES (?,?,?,?,?)\");\nif (NULL != pStmt) {\n    pRes = xdb_stmt_bexec (pStmt, id, name, age, cls, score);\n    pRow = xdb_fetch_row (pRes);\n    // handle pRow\n    xdb_free_result (pRes);\n\n    // close when finish using\n    xdb_stmt_close (pStmt);\n    }\n}\n</code></pre> <pre><code>xdb_stmt_t *pStmt = xdb_stmt_prepare (pConn, \"INSERT INTO student (id,name,age,class,score) VALUES (?,?,?,?,?)\");\nif (NULL != pStmt) {\n    xdb_bind_int (pStmt, 1, id);\n    xdb_bind_str (pStmt, 2, name);\n    xdb_bind_int (pStmt, 3, age);\n    xdb_bind_str (pStmt, 4, cls);\n    xdb_bind_int (pStmt, 5, score);\n    pRes = xdb_stmt_exec (pStmt);\n    pRow = xdb_fetch_row (pRes);\n    // handle pRow\n    xdb_free_result (pRes);\n\n    // close when finish using\n    xdb_stmt_close (pStmt);\n    }\n}\n</code></pre>"},{"location":"develop/prep-stmts/#select","title":"Select","text":"Bind &amp; ExecuteBind then Execute <pre><code>xdb_stmt_t *pStmt = xdb_stmt_prepare (pConn, \"SELECT * FROM student WHERE id=?\");\nif (NULL != pStmt) {\n    pRes = xdb_stmt_bexec (pStmt, id);\n    pRow = xdb_fetch_row (pRes);\n    // handle pRow\n    xdb_free_result (pRes);\n\n    // close when finish using\n    xdb_stmt_close (pStmt);\n    }\n}\n</code></pre> <pre><code>xdb_stmt_t *pStmt = xdb_stmt_prepare (pConn, \"SELECT * FROM student WHERE id=?\");\nif (NULL != pStmt) {\n    xdb_bind_int (pStmt, 1, id);\n    pRes = xdb_stmt_exec (pStmt);\n    pRow = xdb_fetch_row (pRes);\n    // handle pRow\n    xdb_free_result (pRes);\n\n    // close when finish using\n    xdb_stmt_close (pStmt);\n    }\n}\n</code></pre>"},{"location":"develop/prep-stmts/#update","title":"Update","text":"Bind &amp; ExecuteBind then Execute <pre><code>xdb_stmt_t *pStmt = xdb_stmt_prepare (pConn, \"UPDATE student SET age=age+? WHERE id=?\");\nif (NULL != pStmt) {\n    pRes = xdb_stmt_bexec (pStmt, 2, id);\n\n    // close when finish using\n    xdb_stmt_close (pStmt);\n    }\n}\n</code></pre> <pre><code>xdb_stmt_t *pStmt = xdb_stmt_prepare (pConn, \"UPDATE student SET age=age+? WHERE id=?\");\nif (NULL != pStmt) {\n    xdb_bind_int (pStmt, 1, 2); // age\n    xdb_bind_int (pStmt, 2, id);\n    pRes = xdb_stmt_exec (pStmt);\n\n    // close when finish using\n    xdb_stmt_close (pStmt);\n    }\n}\n</code></pre>"},{"location":"develop/prep-stmts/#delete","title":"Delete","text":"Bind &amp; ExecuteBind then Execute <pre><code>xdb_stmt_t *pStmt = xdb_stmt_prepare (pConn, \"DELETE FROM student WHERE id=?\");\nif (NULL != pStmt) {\n    pRes = xdb_stmt_bexec (pStmt, id);\n\n    // close when finish using\n    xdb_stmt_close (pStmt);\n    }\n}\n</code></pre> <pre><code>xdb_stmt_t *pStmt = xdb_stmt_prepare (pConn, \"DELETE FROM student WHERE id=?\");\nif (NULL != pStmt) {\n    xdb_bind_int (pStmt, 1, id[i]);\n    pRes = xdb_stmt_exec (pStmt);\n\n    // close when finish using\n    xdb_stmt_close (pStmt);\n    }\n}\n</code></pre>"},{"location":"develop/query/","title":"Query Rows","text":""},{"location":"develop/query/#select-rows","title":"Select Rows","text":"SQLC <pre><code>SELECT id,name,age,class,score from student WHERE id = 2;\n</code></pre> <pre><code>xdb_res_t *pRes = xdb_exec (pConn, \"SELECT id,name,age,class,score from student WHERE id = 2\");\n\nxdb_res_t *pRes = xdb_pexec (pConn, \"SELECT id,name,age,class,score from student WHERE id = %d\", id);\n</code></pre>"},{"location":"develop/query/#get-row-count","title":"Get Row Count","text":"<pre><code>xdb_row_count (pRes);\n</code></pre>"},{"location":"develop/query/#get-column-information","title":"Get Column information","text":"<pre><code>for (int i = 0; i &lt; xdb_column_count(pRes); ++i) {\n    printf (\"type %d name %s\\n\", xdb_column_type(pRes, i), xdb_column_name(pRes, i));\n}\n</code></pre>"},{"location":"develop/query/#fetch-one-row","title":"Fetch One Row","text":"<pre><code>xdb_row_t *pRow = xdb_fetch_row (pRes);\n</code></pre>"},{"location":"develop/query/#get-column-values-by-id","title":"Get Column Values by ID","text":"<pre><code>printf (\"char value %d\\n\",      xdb_column_int(pRes, pRow, 0));\nprintf (\"short value %d\\n\",     xdb_column_int(pRes, pRow, 1));\nprintf (\"int value %d\\n\",       xdb_column_int(pRes, pRow, 2));\nprintf (\"bigint value %\"PRIi64\"\\n\", xdb_column_int64(pRes, pRow, 3));\nprintf (\"float value %f\\n\",     xdb_column_float(pRes, pRow, 4));\nprintf (\"double value %d\\n\",    xdb_column_double(pRes, pRow, 5));\nprintf (\"string value %s\\n\",    xdb_column_str(pRes, pRow, 6));\nint len;\nprintf (\"string value %s, len %d\\n\", xdb_column_str2(pRes, pRow, 6, &amp;len), len);\n</code></pre>"},{"location":"develop/query/#get-column-values-by-name","title":"Get Column Values by Name","text":"<pre><code>printf (\"char value %d\\n\",      xdb_col_int(pRes, pRow, \"age\"));\nprintf (\"short value %d\\n\",     xdb_column_int(pRes, pRow, \"\"));\nprintf (\"int value %d\\n\",       xdb_column_int(pRes, pRow, \"id\"));\nprintf (\"bigint value %\"PRIi64\"\\n\", xdb_column_int64(pRes, pRow, \"distance\"));\nprintf (\"float value %f\\n\",     xdb_column_float(pRes, pRow, \"score\"));\nprintf (\"double value %d\\n\",    xdb_column_double(pRes, pRow, \"totoal\"));\nprintf (\"string value %s\\n\",    xdb_column_str(pRes, pRow, \"name\"));\nint len;\nprintf (\"string value %s, len %d\\n\", xdb_col_str2(pRes, pRow, \"name\", &amp;len), len);\n</code></pre>"},{"location":"develop/replication/","title":"Replication","text":""},{"location":"develop/replication/#set-server-id","title":"Set Server ID","text":"xdb-cliSQLC <pre><code>xdb-cli -S -I server1;\n</code></pre> <pre><code>SET SERVERF_ID='server1';\n</code></pre> <pre><code>xdb_exec (pConn, \"SET SERVERF_ID='server1'\");\n</code></pre>"},{"location":"develop/replication/#source-replica-replication","title":"Source-replica replication","text":"SQLC <pre><code>CREATE REPLICA default HOST='192.168.1.1', PORT=7777;\n</code></pre> <pre><code>xdb_exec (pConn, \"CREATE REPLICA default HOST='192.168.1.1', PORT=7777\");\n</code></pre>"},{"location":"develop/replication/#multi-source-replication","title":"Multi-source replication","text":"SQLC <pre><code>CREATE REPLICA server1 HOST='192.168.1.1', PORT=7777, DO_DB=(library, school);\nCREATE REPLICA server2 HOST='192.168.1.2', PORT=7777, DO_DB=(shop, canteen);\n</code></pre> <pre><code>xdb_exec (pConn, \"CREATE REPLICA server1 HOST='192.168.1.1', PORT=7777, DO_DB=(library, school)\");\nxdb_exec (pConn, \"CREATE REPLICA server2 HOST='192.168.1.2', PORT=7777, DO_DB=(shop, canteen)\");\n</code></pre>"},{"location":"develop/server/","title":"Server","text":""},{"location":"develop/server/#start-embedded-crossdb-server","title":"Start Embedded CrossDB Server","text":"<ul> <li>Listen on default port 7777</li> </ul> <pre><code>xdb_exec (pConn, \"CREATE SERVER myserver1\");\n</code></pre> <ul> <li>Listen on specified port 8888</li> </ul> <pre><code>xdb_exec (pConn, \"CREATE SERVER myserver2 PORT=8888\");\n</code></pre>"},{"location":"develop/server/#start-standalone-crossdb-server","title":"Start Standalone CrossDB Server","text":"<p>You can use <code>xdb-cli</code> to start a CrossDB Server.</p> <p>Note</p> <p><code>xdb-cli</code> should have <code>read&amp;write</code> permission to access <code>DataDir</code></p> <ul> <li>Start a default server </li> </ul> <pre><code>$ xdb-cli -S\n   _____                   _____  ____      _\n  / ____|                 |  __ \\|  _ \\   _| |_    CrossDB Server v0.13.0\n | |     _ __ ___  ___ ___| |  | | |_) | |_   _|   Port: 7777\n | |    | '__/ _ \\/ __/ __| |  | |  _ &lt;    |_|     DataDir: /var/xdb_data\n | |____| | | (_) \\__ \\__ \\ |__| | |_) |           ServerID: 1\n  \\_____|_|  \\___/|___/___/_____/|____/            https://crossdb.org\n\nXDB&gt;\n</code></pre> <ul> <li>Create a sever with specified port and DataDir</li> </ul> <pre><code>$ xdb-cli -S -P 8888 -D /tmp/xdb_data\n   _____                   _____  ____      _\n  / ____|                 |  __ \\|  _ \\   _| |_    CrossDB Server v0.13.0\n | |     _ __ ___  ___ ___| |  | | |_) | |_   _|   Port: 8888\n | |    | '__/ _ \\/ __/ __| |  | |  _ &lt;    |_|     DataDir: /tmp/xdb_data\n | |____| | | (_) \\__ \\__ \\ |__| | |_) |           ServerID: 1\n  \\_____|_|  \\___/|___/___/_____/|____/            https://crossdb.org\n</code></pre> <ul> <li>Start server in background</li> </ul> <pre><code>xdb-cli -S -q &amp;\n</code></pre>"},{"location":"develop/server/#connect-to-crossdb-server","title":"Connect to CrossDB Server","text":"<p>You can use following ways to connect CrossDB Server</p> <ul> <li><code>xdb-connect</code> API</li> <li><code>xdb-cli</code></li> <li><code>telnet</code></li> </ul>"},{"location":"develop/transaction/","title":"Transaction","text":"<p>CrossDB transaction supports ACID. Default isolation level is <code>READ COMMITTED</code></p>"},{"location":"develop/transaction/#reader-writer-mvcc","title":"Reader-Writer MVCC","text":"<p>Currently, CrossDB uses table-level read-write locks. Only one writer connection thread can modify the table at a time, while other writer connection threads will be blocked. However, reader connection threads will not be blocked and will see the old values. Once the writer connection's changes are committed, the new values become visible to these reader connections (read committed). </p> <p>In short, there are two versions: a writer version and a reader version. A writer, before commit or rollback, will not block readers from reading old values. If the writer executes for a long time, this mechanism will significantly improve concurrency.</p>"},{"location":"develop/transaction/#auto-commit","title":"Auto-commit","text":"<p>Enabled by default.</p> SQLC <pre><code>-- Disable auto-commit\nSET AUTOCOMMIT = 0;\n-- Enable auto-commit\nSET AUTOCOMMIT = 1;\n</code></pre> <pre><code>// Disable auto-commit\nxdb_exec (pConn, \"SET AUTOCOMMIT = 0\");\n// Enable auto-commit\nxdb_exec (pConn, \"SET AUTOCOMMIT = 1\");\n</code></pre>"},{"location":"develop/transaction/#begin-transaction","title":"Begin Transaction","text":"SQLC <pre><code>BEGIN;\n</code></pre> <pre><code>xdb_begin (pConn); // fast\n// or\nxdb_exec (pConn, \"BEGIN\");\n</code></pre> <p>Note</p> <p>This operation is optional, and the transaction will begin automatically when the table is changed.</p>"},{"location":"develop/transaction/#commit-transaction","title":"Commit Transaction","text":"SQLC <pre><code>COMMIT;\n</code></pre> <pre><code>xdb_commit (pConn); // fast\n// or\nxdb_exec (pConn, \"COMMIT\");\n</code></pre>"},{"location":"develop/transaction/#rollback-transaction","title":"Rollback Transaction","text":"SQLC <pre><code>ROLLBACK;\n</code></pre> <pre><code>xdb_rollback (pConn); // fast\n// or\nxdb_exec (pConn, \"ROLLBACK\");\n</code></pre> <p>Note</p> <p>Even if there are errors during statement execution, the transaction will not be rolled back automatically. The user must explicitly issue a rollback.</p>"},{"location":"develop/trigger/","title":"Trigger","text":""},{"location":"develop/trigger/#define-trigger-function","title":"Define Trigger Function","text":"<pre><code>int \nstu_trigger (xdb_conn_t *pConn, xdb_res_t* pRes, uint32_t type, xdb_row_t *pNewRow, xdb_row_t *pOldRow, void *pArg)\n{\n    switch (type) {\n    case XDB_TRIG_AFT_INS:\n        printf (\"insert student: id %d name '%s' age %d\\n\", \n                    xdb_col_int(pRes, pNewRow, \"id\"), \n                    xdb_col_str(pRes, pNewRow, \"name\"), \n                    xdb_col_int(pRes, pNewRow, \"age\"));\n        break;\n    case XDB_TRIG_AFT_DEL:\n        printf (\"delete student id %d: name '%s' age %d\\n\", \n                    xdb_col_int(pRes, pNewRow, \"id\"), \n                    xdb_col_str(pRes, pNewRow, \"name\"), \n                    xdb_col_int(pRes, pNewRow, \"age\"));\n        break;\n    case XDB_TRIG_AFT_UPD:\n        printf (\"update student id %d: \\n\", \n                    xdb_col_int(pRes, pNewRow, \"id\"));\n        printf (\"    age:  '%d' -&gt; '%d'\\n\", \n                    xdb_col_int(pRes, pOldRow, \"age\"), \n                    xdb_col_int(pRes, pNewRow, \"age\"));\n        break;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"develop/trigger/#create-trigger-function","title":"Create Trigger Function","text":"<pre><code>xdb_create_func (\"stu_trig\", XDB_FUNC_TRIG, \"C\", stu_trigger, NULL);\n</code></pre>"},{"location":"develop/trigger/#create-trigger","title":"Create Trigger","text":"SQLC <pre><code>CREATE TRIGGER stu_ins AFTER INSERT ON student CALL stu_trig\nCREATE TRIGGER stu_upd AFTER UPDATE ON student CALL stu_trig    \nCREATE TRIGGER stu_del AFTER DELETE ON student CALL stu_trig\n</code></pre> <pre><code>xdb_exec (pConn, \"CREATE TRIGGER stu_ins AFTER INSERT ON student CALL stu_trig\");\nxdb_exec (pConn, \"CREATE TRIGGER stu_upd AFTER UPDATE ON student CALL stu_trig\");\nxdb_exec (pConn, \"CREATE TRIGGER stu_del AFTER DELETE ON student CALL stu_trig\");\n</code></pre>"},{"location":"develop/ttl/","title":"TTL (Time to Live)","text":"<p>If you want to periodically delete expired data automatically, you can use the TTL feature. This feature is inspired from TiDB TTL, which is similar with Mongo DB TTL index and Redis Expire.</p> <p>Time to live (TTL) is a feature that allows you to manage CrossDB data lifetime at the row level. For a table with the TTL attribute, CrossDB automatically checks data lifetime and deletes expired data at the row level. This feature can effectively save storage space and enhance performance in some scenarios.</p> <p>The following are some common scenarios for TTL:</p> <ul> <li>Cache data cleanup automatically.</li> <li>Data aging like mac table(fdb).</li> <li>Regularly delete unnecessary historical data.</li> </ul> <p>TTL does not guarantee that all expired data is deleted immediately, but it guarantees the client won't read the expired data.</p>"},{"location":"develop/ttl/#syntax","title":"Syntax","text":"<p>You can configure the TTL attribute of a table using the <code>CREATE TABLE</code> statement.</p> <pre><code>CREATE TABLE t1 (\n    id int PRIMARY KEY,\n    created_at TIMESTAMP\n) TTL = created_at + INTERVAL 3 MONTH;\n</code></pre> <p>The above example creates a table <code>t1</code> and specifies <code>created_at</code> as the TTL timestamp column, which indicates the creation time of the data. The example also sets the longest time that a row is allowed to live in the table to 3 months through <code>INTERVAL 3 MONTH</code>. Data that lives longer than this value will be deleted later.</p>"},{"location":"develop/ttl/#example","title":"Example","text":"<p><pre><code>CREATE TABLE fdb (\n    macaddr MAC,\n    vlan    INT,\n    port    VARCHAR,\n    update_at TIMESTAMP,\n    PRIMARY KEY (vlan, macaddr)\n) TTL = update_at + INTERVAL 5 MINUTE;\n</code></pre> The above example creates a mac table fdb and specifies <code>update_at</code> as the TTL timestamp column. The mac entry will be deleted after 5 minutes. If <code>update_at</code> is updated when there's traffic hit to this mac entry, expiring will be deferred.</p> <p>Insert a mac address.</p> <pre><code>INSERT INTO fdb VALUES ('00:01:02:03:04:05', 100, 'eth1', '2025-05-14T12:40:00');\n\nXDB&gt; SELECT * FROM fdb;\n+-------------------+------+------+---------------------+\n| macaddr           | vlan | port | update_at           |\n+-------------------+------+------+---------------------+\n| 00:01:02:03:04:05 | 100  | eth1 | 2025-05-14T12:40:00 |\n+-------------------+------+------+---------------------+\n1 row in set (0.010 ms)\n</code></pre> <p>After 12:45, this row will not be visible and will be deleted in later time.</p> <pre><code>XDB&gt; SELECT * FROM fdb;\n0 row in set (0.023 ms)\n</code></pre>"},{"location":"get-started/bench/","title":"Bench Test","text":""},{"location":"get-started/bench/#quick-test","title":"Quick Test","text":"<pre><code>crossdb$ make bench\ncrossdb$ make bench-sqlite\ncrossdb$ make bench-stlmap\n</code></pre>"},{"location":"get-started/bench/#bench-tools","title":"Bench Tools","text":"<p>Build all benchmark tools.</p> <pre><code>crossdb/bench/basic$ make build\n</code></pre> <p>Detailed output example</p> <pre><code>******************** Sequential Test *********************\n\n[============= SQL Test =============]\n\n------------ INSERT   1,000 ------------\nUse time     424us, QPS  2,358,490\n------------ Sequential LKUP  2,000,000 ------------\nUse time  307601us, QPS  6,501,929\nUse time  267009us, QPS  7,490,384\nUse time  269925us, QPS  7,409,465\nUse time  312344us, QPS  6,403,196\nUse time  279971us, QPS  7,143,597\n------------ Sequential UPDATE  1,000,000 ------------\nUse time  155097us, QPS  6,447,577\n------------ Sequential DELETE   1,000 ------------\nUse time     163us, QPS  6,134,969\n\n[============= STMT Test =============]\n\n------------ INSERT   1,000 ------------\nUse time     171us, QPS  5,847,953\n------------ Sequential LKUP 10,000,000 ------------\nUse time  390880us, QPS 25,583,299\nUse time  399394us, QPS 25,037,932\nUse time  394197us, QPS 25,368,026\nUse time  394975us, QPS 25,318,058\nUse time  392603us, QPS 25,471,022\n------------ Sequential UPDATE  1,000,000 ------------\nUse time   51747us, QPS 19,324,791\n------------ Sequential DELETE   1,000 ------------\nUse time      52us, QPS 19,230,769\n\n\n*********************     Random Test *********************\n\n[============= SQL Test =============]\n\n------------ INSERT   1,000 ------------\nUse time     338us, QPS  2,958,579\n------------ Random LKUP  2,000,000 ------------\nUse time  268122us, QPS  7,459,290\nUse time  269225us, QPS  7,428,730\nUse time  269999us, QPS  7,407,434\nUse time  273119us, QPS  7,322,815\nUse time  272693us, QPS  7,334,255\n------------ Random UPDATE  1,000,000 ------------\nUse time  158065us, QPS  6,326,511\n------------ Random DELETE   1,000 ------------\nUse time     138us, QPS  7,246,376\n\n[============= STMT Test =============]\n\n------------ INSERT   1,000 ------------\nUse time      61us, QPS 16,393,442\n------------ Random LKUP 10,000,000 ------------\nUse time  397232us, QPS 25,174,205\nUse time  414939us, QPS 24,099,927\nUse time  498385us, QPS 20,064,809\nUse time  431194us, QPS 23,191,417\nUse time  407655us, QPS 24,530,546\n------------ Random UPDATE  1,000,000 ------------\nUse time   51968us, QPS 19,242,610\n------------ Random DELETE   1,000 ------------\nUse time      52us, QPS 19,230,769\n#######################   1,000 Rows Sequential Test Result ###############################\n       DB |   Access | INSERT QPS |  QUERY QPS | UPDATE QPS | DELETE QPS\n  CrossDB |      SQL |  2,358,490 |  6,989,714 |  6,447,577 |  6,134,969\n  CrossDB |     STMT |  5,847,953 | 25,355,667 | 19,324,791 | 19,230,769\n#######################   1,000 Rows Random Test Result ###############################\n       DB |   Access | INSERT QPS |  QUERY QPS | UPDATE QPS | DELETE QPS\n  CrossDB |      SQL |  2,958,579 |  7,390,504 |  6,326,511 |  7,246,376\n  CrossDB |     STMT | 16,393,442 | 23,412,180 | 19,242,610 | 19,230,769\n</code></pre>"},{"location":"get-started/bench/#crossdb-test","title":"CrossDB Test","text":"<pre><code>crossdb/bench/basic$ make \n\ncrossdb/bench/basic$ ./bench-crossdb.bin -h\nUsage:\n  -h                        show this help\n  -n &lt;row count&gt;            default 1000000\n  -r &lt;round count&gt;          test round, default 1\n  -c &lt;cpu core&gt;             bind cpu core\n  -q                        quite mode\n</code></pre> <pre><code>./bench-crossdb.bin -q -n 1000\n\n./bench-crossdb.bin -q -n 1000000\n\n#######################  1,000,000 Rows Sequential Test Result ###############################\n       DB |   Access | INSERT QPS |  QUERY QPS | UPDATE QPS | DELETE QPS\n  CrossDB |      SQL |  3,264,389 |  7,009,289 |  6,011,674 |  6,387,082\n  CrossDB |     STMT | 15,284,910 | 18,752,608 | 17,713,536 | 19,351,342\n#######################  1,000,000 Rows Random Test Result ###############################\n       DB |   Access | INSERT QPS |  QUERY QPS | UPDATE QPS | DELETE QPS\n  CrossDB |      SQL |  3,645,989 |  2,510,993 |  2,162,218 |  2,290,567\n  CrossDB |     STMT | 17,229,793 |  4,548,306 |  5,023,661 |  3,877,532\n</code></pre> <ul> <li>Maximum performance</li> </ul> <p>This will build with <code>-O3</code> and <code>-march=native</code> flags.</p> <pre><code>crossdb/bench/basic$ make fast\n</code></pre>"},{"location":"get-started/bench/#sqlite-test","title":"SQLite Test","text":"<pre><code>crossdb/bench/basic$ make sqlite\ncrossdb/bench/basic$ ./bench-sqlite.bin -h\nUsage:\n  -h                        show this help\n  -n &lt;row count&gt;            default 1000000\n  -r &lt;round count&gt;          test round, default 1\n  -c &lt;cpu core&gt;             bind cpu core\n  -q                        quite mode\n</code></pre> <pre><code>./bench-sqlite.bin -q -n 1000\n\n./bench-sqlite.bin -q -n 1000000\n\n#######################  1,000,000 Rows Sequential Test Result ###############################\n       DB |   Access | INSERT QPS |  QUERY QPS | UPDATE QPS | DELETE QPS\n   SQLite |      SQL |    376,208 |    265,398 |    341,315 |    385,447\n   SQLite |     STMT |    730,936 |  1,190,511 |  1,226,903 |  1,185,077\n#######################  1,000,000 Rows Random Test Result ###############################\n       DB |   Access | INSERT QPS |  QUERY QPS | UPDATE QPS | DELETE QPS\n   SQLite |      SQL |    383,971 |    212,220 |    272,373 |    261,880\n   SQLite |     STMT |    855,666 |    556,285 |    451,552 |    397,380\n</code></pre>"},{"location":"get-started/bench/#c-stl-map-and-hashmap-test","title":"C++ STL Map and HashMap Test","text":"<pre><code>crossdb/bench/basic$ make stlmap\ncrossdb/bench/basic$ ./bench-stlmap.bin -h\nUsage:\n  -h                        show this help\n  -n &lt;row count&gt;            default 1000000\n  -r &lt;round count&gt;          test round, default 1\n  -c &lt;cpu core&gt;             bind cpu core\n  -q                        quite mode\n</code></pre> <pre><code>./bench-stlmap.bin -q -n 1000\n\n./bench-stlmap.bin -q -n 1000000\n\n#######################  1,000,000 Rows Sequential Test Result ###############################\n       DB |   Access | INSERT QPS |  QUERY QPS | UPDATE QPS | DELETE QPS\n      STL |      Map |  2,376,887 | 10,532,768 | 11,597,765 | 12,824,772\n      STL |  HashMap | 18,233,311 | 42,200,012 | 41,266,471 | 37,572,742\n#######################  1,000,000 Rows Random Test Result ###############################\n       DB |   Access | INSERT QPS |  QUERY QPS | UPDATE QPS | DELETE QPS\n      STL |      Map |  3,208,118 |  1,287,031 |  1,391,215 |  1,314,713\n      STL |  HashMap | 19,734,531 |  5,906,412 |  8,522,950 |  5,002,691\n</code></pre>"},{"location":"get-started/download/","title":"Download","text":"<p>We provide precompiled binaries for CrossDB components. Download the latest release of CrossDB for your platform.</p>"},{"location":"get-started/download/#crossdb-v0130","title":"CrossDB v0.13.0","text":"<ul> <li>2025-05-07 Release notes</li> </ul> File Name OS Arch crossdb-0.13.0-linux.deb Linux X64 crossdb-0.13.0-linux.zip Linux X64 crossdb-0.13.0-win64.zip Windows X64"},{"location":"get-started/install/","title":"Build and Install","text":""},{"location":"get-started/install/#download-code","title":"Download code","text":"<pre><code>git clone https://github.com/crossdb-org/crossdb.git\ncd crossdb\n</code></pre>"},{"location":"get-started/install/#build","title":"Build","text":"<pre><code>crossdb$ make\nmake build                Build crossdb library and tool\nmake debug                Build crossdb library and tool with debug\nmake run                  Run crossdb tool\nmake clean                Clean build result\nmake install              Install crossdb(lib&amp;tool&amp;header) to Linux/MacOS/FreeBSD\nmake uninstall            Uninstall crossdb from Linux/MacOS/FreeBSD\nmake example              Build and run example (need to install crossdb first)\nmake smoketest            Build and run smoke test (need to install crossdb first)\nmake bench                Build and run bench test (need to install crossdb first)\nmake bench-sqlite         Build and run sqlite bench test (need to install sqlite3 first)\nmake bench-stlmap         Build and run C++ STL Map and HashMap(unordered_map) bench test\nmake bench-boostmidx      Build and run C++ Boost MultiIndex Order and Hash bench test\n</code></pre>"},{"location":"get-started/install/#linuxmacosfreebsd","title":"Linux/MacOS/FreeBSD","text":"<pre><code>make build\nsudo make install\n</code></pre>"},{"location":"get-started/install/#windows","title":"Windows","text":"<p>You need to install MINGW64 to build, Github Download. Then set the <code>gcc</code> path to <code>system environment variables</code> <code>Path</code> and make sure <code>gcc</code> can run.</p> <pre><code>winbuild.bat\n</code></pre>"},{"location":"get-started/install/#cmake","title":"CMake","text":"<pre><code>cd build\ncmake ..\nmake\nsudo make install\n</code></pre> <p>Windows</p> <p>You need to install MINGW64 CMAKE and make to build.</p> <pre><code>cd build\ncmake -G \"MinGW Makefiles\" -DCMAKE_C_COMPILER=gcc ..\nmake\n</code></pre>"},{"location":"get-started/install/#build-manually","title":"Build manually","text":"<p>There are dozens of source files, but only one needs to be built.</p> <pre><code>gcc -o build/xdb-cli src/xdb-cli.c -lpthread -O2\ngcc -o build/libcrossdb.so src/crossdb.c -fPIC -shared -lpthread -O2\n</code></pre> <p>or clang</p> <pre><code>clang -o build/xdb-cli src/xdb-cli.c -lpthread -O2\nclang -o build/libcrossdb.so src/crossdb.c -fPIC -shared -lpthread -O2\n</code></pre>"},{"location":"get-started/install/#run-tests","title":"Run Tests","text":"<pre><code>crossdb$ make test\n</code></pre> <pre><code>[==========] Running 2 test cases.\n[ RUN      ] XdbTest.insert_one/0\n[       OK ] XdbTest.insert_one/0 (637281ns)\n[ RUN      ] XdbTest.update_one/0\n[       OK ] XdbTest.update_one/0 (195417ns)\n[==========] 2 test cases ran.\n[  PASSED  ] 2 tests.\n</code></pre>"},{"location":"get-started/tutorial/","title":"Tutorial","text":""},{"location":"get-started/tutorial/#open-connection-and-create-default-memory-database","title":"Open connection and create default memory database","text":"<pre><code>xdb_res_t   *pRes;\nxdb_row_t   *pRow;\n\nxdb_conn_t  *pConn = xdb_open (\":memory:\");\nXDB_CHECK (NULL != pConn, printf (\"failed to create DB\\n\"); return -1;);\n</code></pre>"},{"location":"get-started/tutorial/#create-table","title":"Create Table","text":"<pre><code>pRes = xdb_exec (pConn, \"CREATE TABLE IF NOT EXISTS student (id INT PRIMARY KEY, name CHAR(16), age INT, class CHAR(16), score FLOAT, info CHAR(255))\");\nXDB_RESCHK(pRes, printf (\"Can't create table student\\n\"); goto error;);\npRes = xdb_exec (pConn, \"CREATE TABLE IF NOT EXISTS teacher (id INT PRIMARY KEY, name CHAR(16), age INT, info CHAR(255), INDEX (name))\");\nXDB_RESCHK(pRes, printf (\"Can't create table teacher\\n\"); goto error;);\npRes = xdb_exec (pConn, \"CREATE TABLE IF NOT EXISTS book (id INT PRIMARY KEY, name CHAR(64), author CHAR(32), count INT, INDEX (name))\");\nXDB_RESCHK(pRes, printf (\"Can't create table book\\n\"); goto error;);\n</code></pre>"},{"location":"get-started/tutorial/#insert-rows","title":"Insert Rows","text":"<pre><code>pRes = xdb_exec (pConn, \"INSERT INTO student (id,name,age,class,score) VALUES (1,'jack',10,'3-1',90),(2,'tom',11,'2-5',91),(3,'jack',11,'1-6',92),(4,'rose',10,'4-2',90),(5,'tim',10,'3-1',95)\");\nXDB_RESCHK(pRes, printf (\"Can't insert table student\\n\"); goto error;);\npRes = xdb_pexec (pConn, \"INSERT INTO student (id,name,age,class,score,info) VALUES (6,'Tony',10,'3-1',95,'%s')\", \"He is a boy.\\nHe likes playing football.\\nWe all like him!\");\nXDB_RESCHK(pRes, printf (\"Can't insert table student\\n\"); goto error;);\npRes = xdb_pexec (pConn, \"INSERT INTO student (id,name,age,class,score,info) VALUES (7,'Wendy',10,'3-1',95,'%s')\", \"She is a girl.\\nShe likes cooking.\\nWe all love her!\");\nXDB_RESCHK(pRes, printf (\"Can't insert table student\\n\"); goto error;);\npRes = xdb_exec (pConn, \"INSERT INTO teacher (id,name,age) VALUES (1,'Tomas',40),(2,'Steven',50),(3,'Bill',31),(4,'Lucy',29)\");\nXDB_RESCHK(pRes, printf (\"Can't insert table teacher\\n\"); goto error;);\npRes = xdb_exec (pConn, \"INSERT INTO book (id,name,author,count) VALUES (1,'Romeo and Juliet','Shakespeare',10),(2,'Pride and Prejudice','Austen',5),(3,'Great Expectations','Dickens',8),(4,'Sorrows of Young Werther','Von Goethe',4)\");\nXDB_RESCHK(pRes, printf (\"Can't insert table book\\n\"); goto error;);\n</code></pre>"},{"location":"get-started/tutorial/#select-rows","title":"Select Rows","text":"<pre><code>pRes = xdb_exec (pConn, \"SELECT * from student\");\nprintf (\"=== Select all %d rows\\n\", xdb_row_count(pRes));\nwhile (NULL != (pRow = xdb_fetch_row (pRes))) {\n    xdb_print_row (pRes, pRow, 0);\n    printf (\"\\n\");\n}\nxdb_free_result (pRes);\n</code></pre>"},{"location":"get-started/tutorial/#update-rows","title":"Update Rows","text":"<pre><code>printf (\"\\n=== Update age = 9 for id = 2\\n\");\npRes = xdb_exec (pConn, \"UPDATE student set age=9 WHERE id = 2\");\nXDB_RESCHK(pRes, printf (\"Can't update id=%d\\n\",2); goto error;);\n\npRes = xdb_exec (pConn, \"SELECT id,name,age,class,score from student WHERE id = 2\");\nprintf (\"  select %d rows\\n  \", xdb_row_count(pRes));\nwhile (NULL != (pRow = xdb_fetch_row (pRes))) {\n    xdb_print_row (pRes, pRow, 0);\n    printf (\"\\n\");\n}\nxdb_free_result (pRes);\n</code></pre>"},{"location":"get-started/tutorial/#delete-rows","title":"Delete Rows","text":"<pre><code>printf (\"\\n=== Delete id = 3\\n\");\npRes = xdb_exec (pConn, \"DELETE FROM student WHERE id = 3\");\nXDB_RESCHK(pRes, printf (\"Can't delete id=%d\\n\",3); goto error;);\n\npRes = xdb_exec (pConn, \"SELECT * from student WHERE id = 3\");\nprintf (\"  select %d rows\\n\", xdb_row_count(pRes));\nwhile (NULL != (pRow = xdb_fetch_row (pRes))) {\n    xdb_print_row (pRes, pRow, 0);\n    printf (\"\\n\");\n}\nxdb_free_result (pRes);\n</code></pre>"},{"location":"get-started/tutorial/#aggregation-function","title":"Aggregation function","text":"<pre><code>printf (\"\\n=== AGG COUNT,MIN,MAX,SUM,AVG\\n\");\npRes = xdb_exec (pConn, \"SELECT COUNT(*),MIN(score),MAX(score),SUM(score),AVG(score) FROM student\");\nprintf (\"  --- select %d rows\\n  \", xdb_row_count(pRes));\nif (NULL != (pRow = xdb_fetch_row (pRes))) {\n    xdb_print_row (pRes, pRow, 0);\n    printf (\"\\n\");\n}\nxdb_free_result (pRes);\n</code></pre>"},{"location":"get-started/tutorial/#transaction-rollback","title":"Transaction Rollback","text":"<pre><code>printf (\"\\n=== Rollback\\n\");\nxdb_begin (pConn);\nprintf (\"  update age=15 for id = 2\\n\");\npRes = xdb_exec (pConn, \"UPDATE student set age=15 WHERE id = 2\");\npRes = xdb_exec (pConn, \"SELECT id,name,age from student WHERE id = 2\");\nprintf (\"  select %d rows: \", xdb_row_count(pRes));\nif (NULL != (pRow = xdb_fetch_row (pRes))) {\n    xdb_print_row (pRes, pRow, 0);\n    printf (\"\\n\");\n}\nxdb_free_result (pRes);\nprintf (\"  -- rollback\\n\");\nxdb_rollback (pConn);\npRes = xdb_exec (pConn, \"SELECT id,name,age from student WHERE id = 2\");\nprintf (\"  select %d rows: \", xdb_row_count(pRes));\nif (NULL != (pRow = xdb_fetch_row (pRes))) {\n    xdb_print_row (pRes, pRow, 0);\n    printf (\"\\n\");\n}\nxdb_free_result (pRes);\n</code></pre>"},{"location":"get-started/tutorial/#transaction-commit","title":"Transaction Commit","text":"<pre><code>printf (\"\\n=== Commit\\n\");\nxdb_begin (pConn);\nprintf (\"  update age=15 for id = 2\\n\");\npRes = xdb_exec (pConn, \"UPDATE student set age=15 WHERE id = 2\");\npRes = xdb_exec (pConn, \"SELECT * from student WHERE id = 2\");\nprintf (\"  select %d rows: \", xdb_row_count(pRes));\nif (NULL != (pRow = xdb_fetch_row (pRes))) {\n    xdb_print_row (pRes, pRow, 0);\n    printf (\"\\n\");\n}\nxdb_free_result (pRes);\nprintf (\"  -- commit\\n\");\nxdb_commit (pConn);\npRes = xdb_exec (pConn, \"SELECT * from student WHERE id = 2\");\nprintf (\"  select %d rows: \", xdb_row_count(pRes));\nif (NULL != (pRow = xdb_fetch_row (pRes))) {\n    xdb_print_row (pRes, pRow, 0);\n    printf (\"\\n\");\n}\nxdb_free_result (pRes);\n</code></pre>"},{"location":"get-started/tutorial/#multi-statements","title":"Multi-Statements","text":"<pre><code>printf (\"\\n=== Muti-Statements\\n\");\npRes = xdb_exec (pConn, \"SELECT COUNT(*) FROM student; SELECT id,name FROM student WHERE id=2\");\nprintf (\"  -- 1st result: \");\n// count(*) \nif (NULL != (pRow = xdb_fetch_row (pRes))) {\n    xdb_print_row (pRes, pRow, 0);\n    printf (\"\\n\");\n}\nxdb_free_result (pRes);\n// select\nprintf (\"  -- 2nd result: \");\npRes = xdb_next_result (pConn);\nif (NULL != pRes) {\n    if (NULL != (pRow = xdb_fetch_row (pRes))) {\n        xdb_print_row (pRes, pRow, 0);\n        printf (\"\\n\");\n    }\n    xdb_free_result (pRes);\n}\n</code></pre>"},{"location":"get-started/tutorial/#enter-embedded-shell","title":"Enter Embedded Shell","text":"<pre><code>printf (\"\\n=== Enter interactive embedded shell\\n\");\nxdb_exec (pConn, \"SHELL\");\n</code></pre>"},{"location":"get-started/tutorial/#example-output","title":"Example Output","text":"<pre><code>crossdb$ make example\n=== Select all 7 rows\nid=1 name='jack' age=10 class='3-1' score=90.000000 info=''\nid=2 name='tom' age=11 class='2-5' score=91.000000 info=''\nid=3 name='jack' age=11 class='1-6' score=92.000000 info=''\nid=4 name='rose' age=10 class='4-2' score=90.000000 info=''\nid=5 name='tim' age=10 class='3-1' score=95.000000 info=''\nid=6 name='Tony' age=10 class='3-1' score=95.000000 info='He is a boy.\nHe likes playing football.\nWe all like him!'\nid=7 name='Wendy' age=10 class='3-1' score=95.000000 info='She is a girl.\nShe likes cooking.\nWe all love her!'\n\n=== Update age = 9 for id = 2\n  select 1 rows\n  id=2 name='tom' age=9 class='2-5' score=91.000000\n  id=2 name='tom' age=9 class='2-5' score=91.000000\n  id=2 name='tom' age=9 class='2-5' score=91.000000\n\n=== Delete id = 3\n  select 0 rows\n\n=== AGG COUNT,MIN,MAX,SUM,AVG\n  --- select 1 rows\n  COUNT(*)=6 MIN(score)=90.000000 MAX(score)=95.000000 SUM(score)=556.000000 AVG(score)=92.666667\n  COUNT(*)=6 MIN(score)=90.000000 MAX(score)=95.000000 SUM(score)=556.000000 AVG(score)=92.666667\n  COUNT(*)=6 MIN(score)=90.000000 MAX(score)=95.000000 SUM(score)=556.000000 AVG(score)=92.666667\n\n=== Rollback\n  update age=15 for id = 2\n  select 1 rows: id=2 name='tom' age=15\n  -- rollback\n  select 1 rows: id=2 name='tom' age=9\n\n=== Commit\n  update age=15 for id = 2\n  select 1 rows: id=2 name='tom' age=15 class='2-5' score=91.000000 info=''\n  -- commit\n  select 1 rows: id=2 name='tom' age=15 class='2-5' score=91.000000 info=''\n\n=== Muti-Statements\n  -- 1st result: COUNT(*)=6\n  -- 2nd result: id=2 name='tom'\n\n=== Enter interactive embedded shell\n   _____                   _____  ____      _\n  / ____|                 |  __ \\|  _ \\   _| |_\n | |     _ __ ___  ___ ___| |  | | |_) | |_   _|\n | |    | '__/ _ \\/ __/ __| |  | |  _ &lt;    |_|\n | |____| | | (_) \\__ \\__ \\ |__| | |_) |  0.8.0\n  \\_____|_|  \\___/|___/___/_____/|____/ crossdb.org\n\n============ Welcome to CrossDB Shell ============\n&lt;help&gt;: Help Info       &lt;F1&gt;: Shortcuts\n&lt;exit&gt;: Exit shell      &lt;TAB&gt;: Auto completion\n\nXDB&gt; exit\n</code></pre>"},{"location":"sql/backup/","title":"Backup and Restore","text":""},{"location":"sql/backup/#source","title":"Source","text":"<p>Load and execute SQL file into current database</p> <pre><code>SOURCE '[path/]sqlfile'\n</code></pre>"},{"location":"sql/backup/#dump-database","title":"Dump Database","text":"<p>Dump current database to console</p> <pre><code>DUMP DATABASE\n</code></pre> <p>Dump specified database with options</p> <pre><code>DUMP DATABASE db_name [dump_option] ...\n\ndump_option:\n    NODROP      : Don't add DROP statement\n  | NOCREATE    : Don't add CREATE statement\n  | NODATA      : Don't dump ROW data\n  | INTO '[path/]outfile' : Dump into file instead of console\n</code></pre>"},{"location":"sql/data-types/","title":"Data Types","text":"Type Bytes Description Note BOOL 1 Bool, the value range is {<code>true</code>, <code>false</code>}. TINYINT 1 Single-byte integer, the value range is [-128, 127]. SMALLINT 2 Short integer, the value range is [-32768, 32767]. INT 4 Integer, the value range is [-2^31, 2^31-1]. BIGINT 8 Long integer, the value range is [-2^63, 2^63-1]. TINYINT UNSIGNED 1 unsigned single-byte integer, the value range is [0, 255]. TBD SMALLINT UNSIGNED 2 unsigned integer, the value range is [0, 65535]. TBD INT UNSIGNED 4 Unsigned integer, the value range is [0, 2^32-1]. TBD BIGINT UNSIGNED 8 unsigned long integer, the value range is [0, 2^64-1]. TBD TIMESTAMP 8 Default precision is microsecond. FLOAT 4 Floating point number. DOUBLE 8 Double precision floating point number. CHAR [COLLATE collation_name] User-defined, max 65535 Fixed-length UTF-8 string. VARCHAR [COLLATE collation_name] User-defined, max 65535 Variable-length UTF-8 string. JSON JSON document, max 65535. BINARY User-defined, max 65535 Fixed-length binary data. VARBINARY User-defined, max 65535 Variable-length binary data. INET 18 IPv4 or IPv6 address, and optionally subnet. MAC 6 MAC addresses."},{"location":"sql/data-types/#collation","title":"Collation","text":"Type Description NOCASE Case insensitive [Default]. BINARY Case sensitive."},{"location":"sql/data-types/#literals","title":"Literals","text":"Type Literals Boolean <code>true</code>, <code>false</code> Integer <code>123</code>, <code>-123</code> Floating-Point <code>1.23</code>, <code>-1.23</code> Character <code>'abc'</code>, <code>\"abc\"</code> Binary <code>x'a23f5fde'</code>, <code>X'A23F5FDE'</code>, <code>0xa23f5fde</code>, <code>0XA23F5FDE</code> Timestamp <code>'2024-11-01'</code>, <code>'2024-11-01T19:05:12'</code>, <code>'2024-11-01T19:05:12.561'</code>, <code>'2024-11-01T19:05:12.561288'</code>, <code>1730459112561288</code>(microsecond) Inet Address <code>'10.1.1.1'</code>, <code>'10.1.1.0/24'</code>, <code>'2001:4f8:3:ba:\u200b2e0:81ff:fe22:d1f1'</code>, <code>'2001:4f8:3:ba::/64'</code> Mac Address <code>'08:00:2b:01:02:03'</code>, <code>'08-00-2b-01-02-03'</code>, <code>'0800.2b01.0203'</code>, <code>'0800-2b01-0203'</code>, <code>'08002b:010203'</code>, <code>'08002b-010203'</code>, <code>'08002b010203'</code>"},{"location":"sql/data-types/#escape-characters","title":"Escape Characters","text":"Escape Character Actual Meaning \\n Line Break \\r Carriage Return \\t tab \\' Single quote ' \\\" Double quote \" \\` backtick \\\\ Back Slash <code>\\</code> \\% Percent sign <code>%</code> \\_ Unserscore  <code>_</code>"},{"location":"sql/database/","title":"Database","text":""},{"location":"sql/database/#create-database","title":"Create Database","text":"<pre><code>CREATE DATABASE [IF NOT EXISTS] {db_name | '[path/]db_name'} [db_option] ...\n\ndb_option:\n    ENGINE = {MMAP | MEMORY}\n  | LOCKMODE = {THREAD | PROCESS | NOLOCK}\n  | SYNCMODE = {ASYNC | SYNC | NOSYNC | 2~1000000}\n</code></pre> LOCKMODE Lock used Description THREAD [default] high-performance thread read-write lock For single process multiple threads access. PROCESS file read-write lock For multiple processes multiple threads access. NOLOCK no lock For test/diag purpose only. SYNCMODE Description ASYNC [default] Flush WAL to disk once per second (Schedule OS to flush WAL to disk asynchronously if possible) SYNC Flush WAL to disk at each transaction commit NOSYNC Don't do flush [for ramdisk only] 2~1000000 Flush WAL to disk after number of transaction commits or per second <p>Note</p> <p><code>'[path]/db_name'</code> is only valid for embedded database. <code>db_options</code> are default values for new created tables and you can use <code>table_options</code> to overwrite these default values.</p>"},{"location":"sql/database/#open-database","title":"Open Database","text":"<pre><code>OPEN DATABASE {db_name | '[path/]db_name'} [dbg_option] ...\n\ndbg_option:\n  LOCKMODE = {THREAD | PROCESS | NOLOCK}\n</code></pre> <p>Note</p> <p>This command can only be used for embedded database.  dbg_option is only valid for current session and only for debug purpose.</p>"},{"location":"sql/database/#close-database","title":"Close Database","text":"<pre><code>CLOSE DATABASE [IF EXISTS] db_name\n</code></pre> <p>Note</p> <p>This command can only be used for embedded database. </p>"},{"location":"sql/database/#drop-database","title":"Drop Database","text":"<pre><code>DROP DATABASE [IF EXISTS] db_name\n</code></pre>"},{"location":"sql/database/#use-database","title":"Use Database","text":"<pre><code>USE db_name\n</code></pre>"},{"location":"sql/database/#flush-database","title":"Flush Database","text":"<pre><code>FLUSH\n</code></pre>"},{"location":"sql/database/#repair-database","title":"Repair Database","text":"<pre><code>REPAIR\n</code></pre>"},{"location":"sql/database/#show-databases","title":"Show Databases","text":"<pre><code>SHOW DATABASES [WHERE expr]\n</code></pre> <pre><code>XDB&gt; show DATABASES ;\n+----------+--------+-----------+\n| database | engine | data_path |\n+----------+--------+-----------+\n| system   |        |           |\n| memory   |        |           |\n+----------+--------+-----------+\n2 rows in set (0.012 ms)\n</code></pre>"},{"location":"sql/dml/","title":"Data Manipulation","text":""},{"location":"sql/dml/#insert","title":"Insert","text":"<pre><code>INSERT INTO tbl_name \n    [(col_name,...)] \n    VALUES (val,...), ...\n</code></pre>"},{"location":"sql/dml/#replace","title":"Replace","text":"<pre><code>REPLACE INTO tbl_name \n    [(col_name,...)] \n    VALUES (val,...), ...\n</code></pre>"},{"location":"sql/dml/#select","title":"Select","text":"<pre><code>SELECT {col_name | sel_expr | agg_func(col_name)} [AS as_name], ... FROM tbl_name\n    [WHERE expr]\n    [ORDER BY col_name [ASC | DESC], ...]\n    [LIMIT {[offset,] row_count | row_count OFFSET offset}]\n\nsel_expr:\n    {val|col_name} + {val|col_name}\n  | {val|col_name} - {val|col_name}\n  | {val|col_name} * {val|col_name}\n  | {val|col_name} / {val|col_name}\n\nagg_func:\n    COUNT({* | col_name})\n  | SUM(col_name)\n  | AVG(col_name)\n  | MIN(col_name)\n  | MAX(col_name)\n</code></pre>"},{"location":"sql/dml/#where-expression","title":"Where Expression","text":"<p>Support following simple expressions now only.</p> <pre><code>expr AND expr AND ...\n\nexpr:\n    col_name {= | &gt; | &gt;= | &lt; | &lt;= | != | &lt;&gt;} value\n  | value {= | &gt; | &gt;= | &lt; | &lt;= | != | &lt;&gt;} col_name\n</code></pre>"},{"location":"sql/dml/#update","title":"Update","text":"<pre><code>UPDATE tbl_name\n    SET col_name={val|set_expr}, ... \n    [WHERE where_expr]\n    [ORDER BY col_name [ASC | DESC], ...]\n    [LIMIT {[offset,] row_count | row_count OFFSET offset}]\n\nset_expr:\n    {val|col_name} + {val|col_name}\n  | {val|col_name} - {val|col_name}\n  | {val|col_name} * {val|col_name}\n  | {val|col_name} / {val|col_name}\n</code></pre>"},{"location":"sql/dml/#delete","title":"Delete","text":"<pre><code>DELETE FROM tbl_name\n    [WHERE where_expr]\n    [ORDER BY col_name [ASC | DESC], ...]\n    [LIMIT {[offset,] row_count | row_count OFFSET offset}]\n</code></pre>"},{"location":"sql/dml/#explain","title":"Explain","text":"<pre><code>EXPLAIN SELECT statement\n</code></pre>"},{"location":"sql/functions/","title":"Functions","text":""},{"location":"sql/functions/#aggregate-functions","title":"Aggregate Functions","text":"Function Return Type Description COUNT(*) BIGINT The number of rows. COUNT(col_name) BIGINT The number of rows in the specified column. MIN(col_name) Same with column The minimum value of a specific column MAX(col_name) Same with column The maximum value of a specific column. SUM(col_name) DOUBLE or BIGINT The sum of a specific column in a table AVG(col_name) DOUBLE The average value of the specified column."},{"location":"sql/indexes/","title":"Index","text":""},{"location":"sql/indexes/#create-index","title":"Create Index","text":"<pre><code>CREATE [UNIQUE] INDEX idx_name \n    [USING {HASH | BTREE}] \n    ON tbl_name (col_name,...)\n</code></pre>"},{"location":"sql/indexes/#drop-index","title":"Drop Index","text":"<pre><code>DROP INDEX idx_name ON tbl_name\n</code></pre>"},{"location":"sql/indexes/#show-index","title":"Show Index","text":"<pre><code>SHOW {INDEX | INDEXES | KEYS} [FROM tbl_name] [WHERE expr]\n</code></pre> <pre><code>XDB&gt; show INDEXES ;\n+---------+---------+------+----------+\n| table   | idx_key | type | col_list |\n+---------+---------+------+----------+\n| student | PRIMARY | HASH | id       |\n| student | name_2  | HASH | name     |\n| teacher | PRIMARY | HASH | id       |\n| teacher | name_2  | HASH | name     |\n| book    | PRIMARY | HASH | id       |\n| book    | name_2  | HASH | name     |\n+---------+---------+------+----------+\n6 rows in set (0.016 ms)\n</code></pre>"},{"location":"sql/misc/","title":"Misc","text":""},{"location":"sql/misc/#shell","title":"Shell","text":"<p>Enter the interactive shell.</p> <pre><code>SHELL [PROMPT='prompt&gt; ']\n</code></pre>"},{"location":"sql/misc/#help","title":"Help","text":"<pre><code>HELP [topic] [subtopic]\n</code></pre>"},{"location":"sql/name-limit/","title":"Name and Limit","text":""},{"location":"sql/name-limit/#case-sensitive","title":"Case Sensitive","text":"Type Case-sensitive Keyword False Function False DB Name False Table Name False Column Name False Index Name False"},{"location":"sql/name-limit/#limit","title":"Limit","text":"Type Default Limit Configurable DB Name 64 Yes Table Name 64 Yes Column Name 64 Yes Index Name 64 Yes Single SQL statement 1048576 (1M) Yes DB per process 1024 Yes Table per DB 4095 Yes (at most 4095 now, will support more than 4K later) Rows per Table 2,000,000,000 (2B) Not now, will support more than 2B later Row size 524288 (512K) Yes Index per Table 16 Yes (at most 64) Filter Fields 64 Yes"},{"location":"sql/operators/","title":"Operators","text":""},{"location":"sql/operators/#comparison-operators","title":"Comparison Operators","text":"Operator Description Note = Equal to &lt;&gt;, != Not equal to &gt; Greater than &lt; Less than &gt;= Greater than or equal to &lt;= Less than or equal to IS NULL NULL value test TBD IS NOT NULL NOT NULL value test TBD BETWEEN ... AND ... Value is within a range TBD NOT BETWEEN ... AND ... Value is not within a range TBD IN Value is within a list of values TBD NOT IN Value is not within a list of values TBD LIKE Simple pattern matching NOT LIKE Negation of LIKE TBD REGEXP Regular expression pattern matches NOT REGEXP Negation of REGEXP TBD RLIKE Synonym for REGEXP <p>LIKE is used together with wildcards to match strings. Its usage is described as follows:</p> <ul> <li><code>%</code> matches 0 or any number of characters.</li> <li><code>_</code> matches any single ASCII character.</li> <li><code>\\_</code> is used to match the <code>_</code> in the string.</li> <li><code>\\%</code> is used to match the <code>%</code> in the string.</li> </ul>"},{"location":"sql/operators/#logical-operators","title":"Logical Operators","text":"Operator Description Note AND Logical AND OR Logical OR"},{"location":"sql/operators/#json-operators","title":"JSON Operators","text":"<p>Use <code>-&gt;'field'</code> to access the top field.</p> <pre><code>CREATE TABLE example (student JSON);\nINSERT INTO example VALUES ('{ \"id\":1, \"name\": \"Tommy\", \"class\": \"1-2\" }');\nINSERT INTO example VALUES ('{ \"id\":2, \"name\": \"Jack\", \"class\": \"1-3\" }');\nINSERT INTO example VALUES ('{ \"id\":3, \"name\": \"Rose\", \"class\": \"1-2\" }');\nINSERT INTO example VALUES ('{ \"id\":4, \"name\": \"Tommy\", \"class\": \"1-3\" }');\n</code></pre> <pre><code>XDB&gt; SELECT * FROM example WHERE student-&gt;'id'=1;\n+---------------------------------------------+\n| student                                     |\n+---------------------------------------------+\n| { \"id\":1, \"name\": \"Tommy\", \"class\": \"1-2\" } |\n+---------------------------------------------+\n</code></pre> <pre><code>XDB&gt; SELECT * FROM example WHERE student-&gt;'name'='Tommy';\n+---------------------------------------------+\n| student                                     |\n+---------------------------------------------+\n| { \"id\":1, \"name\": \"Tommy\", \"class\": \"1-2\" } |\n| { \"id\":4, \"name\": \"Tommy\", \"class\": \"1-3\" } |\n+---------------------------------------------+\n</code></pre>"},{"location":"sql/replication/","title":"Replication","text":""},{"location":"sql/replication/#create-replication","title":"Create Replication","text":"<pre><code>CREATE REPLICA rep_name [replication_option] ...\n\nreplication_option:\n    HOST = xx \n  | PORT = xx \n  | USER = xx \n  | PASSWORD = xx \n  | DO_DB = (db_name, db_name, ...)\n  | DO_TABLE = (db_name.tbl_name, ...)\n</code></pre>"},{"location":"sql/replication/#drop-replication","title":"Drop Replication","text":"<pre><code>DROP REPLICA rep_name\n</code></pre>"},{"location":"sql/replication/#show-replication","title":"Show Replication","text":"<pre><code>SHOW REPLICAS\n</code></pre>"},{"location":"sql/server/","title":"Server","text":""},{"location":"sql/server/#create-server","title":"Create Server","text":"<pre><code>CREATE SERVER [IF NOT EXISTS] svr_name [server_option ...]\n\nserver_option:\n    PORT = 1~65535  -- default 7777\n</code></pre>"},{"location":"sql/server/#drop-server","title":"Drop Server","text":"<pre><code>DROP SERVER [IF EXISTS] svr_name\n</code></pre>"},{"location":"sql/server/#show-server","title":"Show Server","text":"<pre><code>SHOW SERVERS\n</code></pre> <pre><code>XDB&gt; show SERVERS ;\n+---------+------+\n| server  | port |\n+---------+------+\n| crossdb | 7777 |\n+---------+------+\n1 row in set (0.022 ms)\n</code></pre>"},{"location":"sql/statements/","title":"SQL Statements","text":"Statement Description Note BEGIN Start a new transaction. COMMIT Commit the open transaction if exists. CLOSE DATABASE Close an opened database. Embedded Mode only CREATE DATABASE Create a database. CREATE INDEX Create an index on the specified table. CREATE REPLICA Create a CrossDB Replica. CREATE SERVER Create a CrossDB Server. CREATE TABLE Create a new table. CREATE TRIGGER Create a trigger  on the specified table. DELETE Delete rows in a table. DESCRIBE Describe the specified table. DROP DATABASE Drop a database. DROP INDEX Drop the specified index on the specified table. DROP REPLICA Drop a CrossDB Replica. DROP SERVER Drop the specified server. DROP TABLE Drop the specified table. DUMP DATABASE Dump database into file. EXPLAIN Return detailed information on how the query is executed. FLUSH Flush database. HELP SQL statements help. INSERT Insert row into a table. OPEN DATABASE Open a database on disk. Embedded Mode only REPAIR Repair database. REPLACE Insert or Modify row into a table. ROLLBACK Roll back the open transaction if exists. SELECT Retrieve data from a table. SET AUTOCOMMIT Set session transaction auto-commit. SHELL Enter interactive shell. SHOW COLUMNS Show the list of columns within a given table. SHOW CREATE TABLE Show the <code>CREATE TABLE</code> statement. SHOW DATABASE Show the list of databases. SHOW INDEXES Show the list of indexes associated with a given table. SHOW REPLICAS Show the list of servers. SHOW SERVERS Show the list of servers. SHOW TABLES Show the list of tables in database. SOURCE Load and execute SQL file. UPDATE Modify rows in a table. USE Use the database as the current default database."},{"location":"sql/table/","title":"Table","text":""},{"location":"sql/table/#create-table","title":"Create Table","text":"<pre><code>CREATE TABLE [IF NOT EXISTS] tbl_name (create_definition, ...) [table_option] ...\n\nCREATE OR REPLACE TABLE tbl_name (create_definition, ...)  [table_option] ...\n\ncreate_definition:\n    col_name data_type [column_option] ...\n  | PRIMARY KEY index_definition\n  | UNIQUE [KEY | INDEX] [idx_name] index_definition\n  | {KEY | INDEX} [idx_name] index_definition\n\ndata_type:\n    BOOL\n  | TINYINT [UNSIGNED]\n  | SMALLINT [UNSIGNED]\n  | {INT | INTEGER} [UNSIGNED]\n  | BIGINT [UNSIGNED]\n  | TIMESTAMP\n  | CHAR[(n)] [COLLATE &lt;collation_name&gt;]\n  | VARCHAR[(n)] [COLLATE &lt;collation_name&gt;]\n  | BINARY[(n)]\n  | VBINARY[(n)]\n\ncollation_name:\n    BINARY\n  | NOCASE\n\ncolumn_option:\n    {NOT NULL | NULL} \n  | DEFAULT value\n  | AUTO_INCREMENT \n  | [PRIMARY] KEY\n  | UNIQUE [KEY]\n\nindex_definition: [USING {HASH | BTREE}] (col_name, ...)\n\ntable_option:\n    ENGINE = MEMORY\n  | MAX_ROWS = value\n  | MIN_ROWS = value\n  | LOCKMODE = {THREAD | PROCESS | NOLOCK}\n  | ROWLOCK = {0 | 1}\n  | MVCC = {0 | 1}\n  | TTL = col_name + INTERVAL &lt;num&gt; &lt;MICROSECOND | MILLISECOND | SECOND | MINUTE | HOUR | DAY | WEEK | MONTH | QUARTER | YEAR&gt;\n</code></pre>"},{"location":"sql/table/#drop-table","title":"Drop Table","text":"<pre><code>DROP TABLE [IF EXISTS] tbl_name\n</code></pre>"},{"location":"sql/table/#show-tables","title":"Show Tables","text":""},{"location":"sql/table/#show-all-tables","title":"Show All Tables","text":"<pre><code>SHOW TABLES [LIKE pattern] [WHERE expr]\n</code></pre> <pre><code>XDB&gt; show TABLES ;\n+---------+--------+-------------+-----------+\n| table   | engine | primary_key | data_path |\n+---------+--------+-------------+-----------+\n| student |        |             |           |\n| teacher |        |             |           |\n| book    |        |             |           |\n+---------+--------+-------------+-----------+\n3 rows in set (0.022 ms)\n</code></pre>"},{"location":"sql/table/#show-create-table","title":"Show Create Table","text":"<pre><code>SHOW CREATE TABLE tbl_name\n</code></pre> <pre><code>XDB&gt; show CREATE TABLE student ;\n+-------------------------------+\n| schema                        |\n+-------------------------------+\n| CREATE TABLE student (        |\n|   id               INT,       |\n|   name             CHAR(16),  |\n|   age              INT,       |\n|   class            CHAR(16),  |\n|   score            FLOAT,     |\n|   info             CHAR(256), |\n|   PRIMARY KEY (id),           |\n|   KEY         name_2 (name)   |\n| );                            |\n+-------------------------------+\n1 row in set (0.026 ms)\n</code></pre>"},{"location":"sql/table/#show-table-columns","title":"Show Table Columns","text":"<pre><code>{DESC | DESCRIBE} tbl_name\n\nSHOW COLUMNS [FROM tbl_name] [WHERE expr]\n</code></pre> <pre><code>XDB&gt; DESCRIBE student ;\n+--------+-------+-----+\n| column | type  | len |\n+--------+-------+-----+\n| id     | INT   | 4   |\n| name   | CHAR  | 16  |\n| age    | INT   | 4   |\n| class  | CHAR  | 16  |\n| score  | FLOAT | 4   |\n| info   | CHAR  | 256 |\n+--------+-------+-----+\n6 rows in set (0.023 ms)\n</code></pre>"},{"location":"sql/transaction/","title":"Transaction and Lock","text":""},{"location":"sql/transaction/#begin-transaction","title":"Begin Transaction","text":"<pre><code>BEGIN\n\nSTART TRANSACTION [READ WRITE | READ ONLY]\n</code></pre> <p>Note</p> <p>Will commit any existing open transaction</p>"},{"location":"sql/transaction/#commit-transaction","title":"Commit Transaction","text":"<pre><code>COMMIT\n</code></pre>"},{"location":"sql/transaction/#rollback-transaction","title":"Rollback Transaction","text":"<pre><code>ROLLBACK\n</code></pre>"},{"location":"sql/transaction/#lock-tables","title":"Lock Tables","text":"<pre><code>-- TBD\nLOCK {TABLE | TABLES} tbl_name { READ | WRITE } [, tbl_name { READ | WRITE }] ...\n</code></pre> <p>Note</p> <p>This command must be executed after <code>BEGIN</code> transaction for performance or prevent other sessions to , and locks will be released after commit transaction.</p>"},{"location":"sql/transaction/#set-isolation-level","title":"Set Isolation Level","text":"<pre><code>-- TBD\nSET TRANSACTION ISOLATION LEVEL { READ COMMITTED | REPEATABLE READ | READ UNCOMMITTED | SERIALIZABLE }\n</code></pre> <p>Note</p> <p>TBD, default is <code>READ COMMITTED</code>.</p>"},{"location":"sql/transaction/#set-auto-commit","title":"Set Auto Commit","text":"<pre><code>SET AUTOCOMMIT = {0 | 1}\n</code></pre> <p>Note</p> <p>Default <code>AUTOCOMMIT</code> = 1.</p>"},{"location":"sql/trigger/","title":"Trigger","text":""},{"location":"sql/trigger/#create-trigger","title":"Create Trigger","text":"<pre><code>CREATE TRIGGER [IF NOT EXISTS] trigger_name\n    { BEFORE | AFTER } { INSERT | UPDATE | DELETE }\n    ON tbl_name\n    CALL func_name\n</code></pre>"},{"location":"sql/trigger/#drop-trigger","title":"Drop Trigger","text":"<pre><code>DROP TRIGGER [IF EXISTS] trigger_name ON tbl_name\n</code></pre>"},{"location":"sql/trigger/#show-triggers","title":"Show Triggers","text":"<pre><code>SHOW TRIGGER [FROM tbl_name]\n</code></pre> <pre><code>SHOW TRIGGER STATUS\n</code></pre>"},{"location":"sysdb/information-schema/","title":"INFORMATION_SCHEMA","text":"<p>TBD</p>"},{"location":"sysdb/system/","title":"system","text":""},{"location":"sysdb/system/#databases","title":"Databases","text":"<pre><code>XDB&gt; SELECT * FROM system.databases;\n+----------+--------+-----------+\n| database | engine | data_path |\n+----------+--------+-----------+\n| system   |        |           |\n| memory   |        |           |\n+----------+--------+-----------+\n2 rows in set (0.010 ms)\n</code></pre>"},{"location":"sysdb/system/#tables","title":"Tables","text":"<pre><code>XDB&gt; SELECT * FROM system.tables where database='memory';\n+----------+---------+--------+-----------+-------------------------------+\n| database | table   | engine | data_path | schema                        |\n+----------+---------+--------+-----------+-------------------------------+\n| memory   | student |        |           | CREATE TABLE student (        |\n|          |         |        |           |   id               INT,       |\n|          |         |        |           |   name             CHAR(16),  |\n|          |         |        |           |   age              INT,       |\n|          |         |        |           |   class            CHAR(16),  |\n|          |         |        |           |   score            FLOAT,     |\n|          |         |        |           |   info             CHAR(256), |\n|          |         |        |           |   PRIMARY KEY (id),           |\n|          |         |        |           |   KEY         name_2 (name)   |\n|          |         |        |           | );                            |\n| memory   | teacher |        |           | CREATE TABLE teacher (        |\n|          |         |        |           |   id               INT,       |\n|          |         |        |           |   name             CHAR(16),  |\n|          |         |        |           |   age              INT,       |\n|          |         |        |           |   info             CHAR(256), |\n|          |         |        |           |   PRIMARY KEY (id),           |\n|          |         |        |           |   KEY         name_2 (name)   |\n|          |         |        |           | );                            |\n| memory   | book    |        |           | CREATE TABLE book (           |\n|          |         |        |           |   id               INT,       |\n|          |         |        |           |   name             CHAR(64),  |\n|          |         |        |           |   author           CHAR(32),  |\n|          |         |        |           |   count            INT,       |\n|          |         |        |           |   PRIMARY KEY (id),           |\n|          |         |        |           |   KEY         name_2 (name)   |\n|          |         |        |           | );                            |\n+----------+---------+--------+-----------+-------------------------------+\n3 rows in set (0.020 ms)\n</code></pre>"},{"location":"sysdb/system/#columns","title":"Columns","text":"<pre><code>XDB&gt; SELECT * FROM system.columns where database='memory';\n+----------+---------+--------+-------+-----+\n| database | table   | column | type  | len |\n+----------+---------+--------+-------+-----+\n| memory   | student | id     | INT   | 4   |\n| memory   | student | name   | CHAR  | 16  |\n| memory   | student | age    | INT   | 4   |\n| memory   | student | class  | CHAR  | 16  |\n| memory   | student | score  | FLOAT | 4   |\n| memory   | student | info   | CHAR  | 256 |\n| memory   | teacher | id     | INT   | 4   |\n| memory   | teacher | name   | CHAR  | 16  |\n| memory   | teacher | age    | INT   | 4   |\n| memory   | teacher | info   | CHAR  | 256 |\n| memory   | book    | id     | INT   | 4   |\n| memory   | book    | name   | CHAR  | 64  |\n| memory   | book    | author | CHAR  | 32  |\n| memory   | book    | count  | INT   | 4   |\n+----------+---------+--------+-------+-----+\n14 rows in set (0.017 ms)\n</code></pre>"},{"location":"sysdb/system/#indexes","title":"Indexes","text":"<pre><code>XDB&gt; SELECT * FROM system.indexes where database='memory';\n+----------+---------+---------+------+----------+\n| database | table   | idx_key | type | col_list |\n+----------+---------+---------+------+----------+\n| memory   | student | PRIMARY | HASH | id       |\n| memory   | student | name_2  | HASH | name     |\n| memory   | teacher | PRIMARY | HASH | id       |\n| memory   | teacher | name_2  | HASH | name     |\n| memory   | book    | PRIMARY | HASH | id       |\n| memory   | book    | name_2  | HASH | name     |\n+----------+---------+---------+------+----------+\n6 rows in set (0.016 ms)\n</code></pre>"}]}